tagComment::tagComment()
{
	this.m_bShow = false;
}

tagComment::~tagComment()
{
	this.delete();
}

void tagComment::create()
{
	this.delete();
	this.m_sHeader.create(14, 1, 0, 0);
	this.m_sHeader.setFontSize(16);
	this.m_sHeader.setFontFace(0);
	this.m_sHeader.setFontBold(false);
	this.m_sHeader.setFontColor(0, 0, 0);
}

void tagComment::delete()
{
	this.m_spBase.delete();
	this.m_sHeader.delete();
	this.m_bShow = false;
}

void tagComment::show(string szHeader, ref array@string aszText)
{
	this.hide();
	this.m_sHeader.setText(szHeader);
	int nW1 = this.m_sHeader.getSp().getWidth();
	int nW2 = this.getWidth(aszText);
	if (nW1 <= 0 && nW2 <= 0)
	{
		return;
	}
	int cnt = aszText.Numof();
	if (cnt > 20)
	{
		cnt = 20;
	}
	int nW = _max(nW1, nW2) + 4;
	int nH = 14 * cnt + 2 * (cnt - 1) + 4;
	int nTx = 2;
	int nTy = 2;
	if (nW1 > 0)
	{
		nH += 18;
		nTx += 7;
		nTy += 18;
	}
	this.createBase(nW, nH);
	this.drawText(nTx, nTy, cnt, aszText);
	if (nW1 > 0)
	{
		this.m_sHeader.setZ(Çyèáèòç≈ëÂ());
		this.m_sHeader.setShow(true);
	}
	else
	{
		this.m_sHeader.setShow(false);
	}
	this.m_bShow = true;
	this.setPos(-1, -1);
}

void tagComment::show2(ref array@string aszText)
{
	this.hide();
	int nW1 = this.getWidth(aszText);
	if (nW1 <= 0)
	{
		return;
	}
	int cnt = aszText.Numof();
	if (cnt > 20)
	{
		cnt = 20;
	}
	int nW = nW1 + 4;
	int nH = 16 * cnt + 4;
	this.createBase(nW, nH);
	int nTx = 2;
	int nTy = 2;
	this.drawText(nTx, nTy, cnt, aszText);
	this.m_sHeader.setShow(false);
	this.m_bShow = true;
	this.setPos(-1, -1);
}

void tagComment::hide()
{
	if (!this.m_bShow)
	{
		return;
	}
	this.m_spBase.setShow(0);
	this.m_sHeader.setShow(false);
	this.m_bShow = false;
}

void tagComment::setPos(int nX, int nY)
{
	if (!this.m_bShow)
	{
		return;
	}
	int nMx = 0;
	int nMy = 0;
	if (nX < 0 || nY < 0)
	{
		if (!É}ÉEÉX_à íuéÊìæ(nMx, nMy))
		{
			return;
		}
		nX = nMx + 11;
		nY = nMy + 20;
	}
	else
	{
		nMx = nX;
		nMy = nY;
	}
	int nW = this.m_spBase.getWidth();
	int nH = this.m_spBase.getHeight();
	if (nX + nW > âÊñ ïù())
	{
		nX = nMx - nW;
	}
	if (nY + nH > 568)
	{
		nY = 568 - nH;
	}
	this.m_spBase.setPos(nX, nY);
	this.m_sHeader.setPos(nX + 2, nY + 2);
}

void tagComment::createBase(int nWidth, int nHeight)
{
	this.m_spBase.delete();
	this.m_spBase.create(nWidth + 5, nHeight + 5, 0, 0, 0, 0);
	this.m_spBase.setZ(-1);
	this.m_spBase.setShow(1);
	drawGraph_FillAMap(this.m_spBase, nWidth, 5, 5, nHeight, 128);
	drawGraph_FillAMap(this.m_spBase, 5, nHeight, nWidth, 5, 128);
	drawGraph_Fill(this.m_spBase, 0, 0, nWidth, nHeight, 0, 0, 0);
	drawGraph_FillAMap(this.m_spBase, 0, 0, nWidth, nHeight, 255);
	drawGraph_Fill(this.m_spBase, 1, 1, nWidth - 2, nHeight - 2, 255, 255, 255);
}

void tagComment::drawText(int nX, int nY, int nLine, ref array@string aszText)
{
	int i = 0;
	DrawGraph.SetFontSize(14);
	DrawGraph.SetFontName("ÇlÇr ñæí©");
	DrawGraph.SetFontWeight(1700);
	DrawGraph.SetFontUnderline(1);
	DrawGraph.SetFontStrikeOut(0);
	DrawGraph.SetFontSpace(0);
	DrawGraph.SetFontColor(64, 64, 64);
	int nSpNo = this.m_spBase.getSpNo();
	for (i = 0; i < nLine; ++i)
	{
		DrawGraph.DrawTextToPMap(nSpNo, nX, nY, aszText[i]);
		nY += 16;
	}
}

int tagComment::getWidth(ref array@string aszText)
{
	int i = 0;
	int cnt = aszText.Numof();
	int len1 = 0;
	int len2 = 0;
	len1 = 0;
	for (i = 0; i < cnt; ++i)
	{
		len2 = aszText[i].LengthByte();
		if (len2 > len1)
		{
			len1 = len2;
		}
	}
	return (len1 * 14) / 2;
}

