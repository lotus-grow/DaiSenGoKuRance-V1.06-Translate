tagBattleUnit::tagBattleUnit()
{
	this.clear();
}

tagBattleUnit::~tagBattleUnit()
{
	this.delete();
}

bool tagBattleUnit::create(int nBushoNo)
{
	this.delete();
	tagUnitData sData;
	if (!戦闘ユニット_データ(0, nBushoNo, sData))
	{
		return false;
	}
	this.m_nBushoNo = nBushoNo;
	this.m_sData = sData;
	this.m_nStatus = 0;
	return true;
}

void tagBattleUnit::delete()
{
	this.deleteSp();
	this.clear();
}

void tagBattleUnit::clear()
{
	this.m_nBushoNo = 0;
	this.m_nActionNo = 0;
	this.m_nCount = 0;
	this.m_bLarge = false;
	this.m_bShow = false;
	this.m_nStatus = -1;
}

bool tagBattleUnit::createSpNormal()
{
	if (this.m_nBushoNo <= 0)
	{
		return false;
	}
	if (キャラ_ＨＰモード(0, this.m_nBushoNo) == 1)
	{
		this.m_nCount = 1;
	}
	else
	{
		this.m_nCount = キャラ_兵数(0, this.m_nBushoNo);
	}
	if (!this.createSp1(0))
	{
		return false;
	}
	this.m_nStatus = 0;
	return true;
}

bool tagBattleUnit::createSpAttack(int nActionNo)
{
	if (this.m_nBushoNo <= 0)
	{
		return false;
	}
	ref tagSprite rfSp = this.getSp(1);
	if (rfSp === NULL)
	{
		return false;
	}
	if (rfSp.isCreate())
	{
		if (nActionNo == this.m_nActionNo && nActionNo > 0)
		{
			return true;
		}
	}
	this.m_nActionNo = nActionNo;
	return this.createSp2(1);
}

bool tagBattleUnit::createSpYushaNormal()
{
	if (this.m_nBushoNo <= 0)
	{
		return false;
	}
	bool bRet = false;
	int nOldCount = this.m_nCount;
	this.m_nCount = 1;
	bRet = this.createSp1(2);
	this.m_nCount = nOldCount;
	return bRet;
}

bool tagBattleUnit::createSpYushaAttack(int nActionNo)
{
	if (this.m_nBushoNo <= 0)
	{
		return false;
	}
	bool bRet = false;
	int nOldActionNo = this.m_nActionNo;
	int nOldCount = this.m_nCount;
	this.m_nActionNo = nActionNo;
	this.m_nCount = 1;
	bRet = this.createSp2(3);
	this.m_nActionNo = nOldActionNo;
	this.m_nCount = nOldCount;
	return bRet;
}

void tagBattleUnit::deleteSp()
{
	int i;
	for (i = 0; i < 5; ++i)
	{
		this.m_aspSp[i].delete();
	}
	this.m_nStatus = -1;
}

void tagBattleUnit::moveIn(int nMoveTime, bool bCreate)
{
	if (this.m_nBushoNo <= 0)
	{
		return;
	}
	if (bCreate)
	{
		this.createSpNormal();
	}
	ref tagSprite rfSp = this.getSp(this.m_nStatus);
	if (rfSp === NULL)
	{
		return;
	}
	this.setShow(true);
	int nX = this.getPosX(this.m_nStatus);
	int nY = this.getPosY(this.m_nStatus);
	int nX2 = 0;
	int nW = 0;
	int nTime = 0;
	sact_timer_t sTimer;
	if (this.m_nBushoNo < 21)
	{
		nX2 = -rfSp.getWidth();
	}
	else
	{
		nX2 = 画面幅() + rfSp.getWidth();
	}
	nW = nX - nX2;
	sTimer.Set(0);
	nTime = 0;
	while (nTime < nMoveTime)
	{
		int nX3 = nX2 + (nW * nTime) / nMoveTime;
		rfSp.setPos(nX3, nY);
		UPDATE();
		nTime = sTimer.Get();
	}
	rfSp.setPos(nX, nY);
	UPDATE();
}

void tagBattleUnit::moveOut(int nMoveTime, bool bDelete)
{
	if (this.m_nBushoNo <= 0)
	{
		return;
	}
	ref tagSprite rfSp = this.getSp(this.m_nStatus);
	if (rfSp === NULL)
	{
		return;
	}
	this.setShow(true);
	int nX = this.getPosX(this.m_nStatus);
	int nY = this.getPosY(this.m_nStatus);
	int nX2 = 0;
	int nW = 0;
	int nTime = 0;
	sact_timer_t sTimer;
	if (this.m_nBushoNo < 21)
	{
		nX2 = -rfSp.getWidth();
	}
	else
	{
		nX2 = 画面幅() + rfSp.getWidth();
	}
	nW = nX2 - nX;
	sTimer.Set(0);
	nTime = 0;
	while (nTime < nMoveTime)
	{
		int nX3 = nX + (nW * nTime) / nMoveTime;
		rfSp.setPos(nX3, nY);
		UPDATE();
		nTime = sTimer.Get();
	}
	rfSp.setPos(nX2, nY);
	UPDATE();
	if (bDelete)
	{
		this.deleteSp();
	}
}

void tagBattleUnit::moveDown(int nMoveTime, bool bDelete)
{
	if (this.m_bLarge)
	{
		this.moveOut(nMoveTime, bDelete);
		return;
	}
	if (this.m_nBushoNo <= 0)
	{
		return;
	}
	ref tagSprite rfSp = this.getSp(this.m_nStatus);
	if (rfSp === NULL)
	{
		return;
	}
	this.setShow(true);
	int nX = this.getPosX(this.m_nStatus);
	int nY = this.getPosY(this.m_nStatus);
	int nY2 = 0;
	int nH = 0;
	int nTime = 0;
	sact_timer_t sTimer;
	nY2 = _max(320, rfSp.getHeight());
	nH = nY2 - nY;
	sTimer.Set(0);
	nTime = 0;
	while (nTime < nMoveTime)
	{
		int nY3 = nY + (nH * nTime) / nMoveTime;
		rfSp.setPos(nX, nY3);
		UPDATE();
		nTime = sTimer.Get();
	}
	rfSp.setPos(nX, nY2);
	UPDATE();
	if (bDelete)
	{
		this.deleteSp();
	}
}

void tagBattleUnit::quake(int nWidth, int nHeight)
{
	if (this.m_nBushoNo <= 0)
	{
		return;
	}
	ref tagSprite rfSp = this.getSp(this.m_nStatus);
	if (rfSp === NULL)
	{
		return;
	}
	rfSp.setPos(this.getPosX(this.m_nStatus) + nWidth, this.getPosY(this.m_nStatus) + nHeight);
}

void tagBattleUnit::setPos(int nIndex, int nX, int nY)
{
	if (nIndex < 0 || nIndex >= 5)
	{
		return;
	}
	this.m_asPos[nIndex].set(nX, nY);
}

void tagBattleUnit::setShow(bool bShow)
{
	if (this.m_nBushoNo <= 0)
	{
		return;
	}
	int i;
	for (i = 0; i < 5; ++i)
	{
		this.m_aspSp[i].setShow(0);
	}
	if (this.m_nStatus >= 0 && this.m_nStatus < 5)
	{
		this.m_aspSp[this.m_nStatus].setShow(bShow);
	}
	this.m_bShow = bShow;
}

void tagBattleUnit::setStatus(int nStatus)
{
	if (nStatus < 0 || nStatus >= 4)
	{
		return;
	}
	if (nStatus == this.m_nStatus)
	{
		return;
	}
	this.m_nStatus = nStatus;
	this.setShow(this.m_bShow);
}

ref tagSprite tagBattleUnit::getSp(int nIndex)
{
	if (nIndex < 0 || nIndex >= 5)
	{
		return NULL;
	}
	return this.m_aspSp[nIndex];
}

int tagBattleUnit::getSpNo(int nIndex)
{
	if (nIndex < 0 || nIndex >= 5)
	{
		return 0;
	}
	return this.m_aspSp[nIndex].getSpNo();
}

int tagBattleUnit::getPosX(int nIndex)
{
	if (nIndex < 0 || nIndex >= 5)
	{
		return 0;
	}
	return this.m_asPos[nIndex].m_nX;
}

int tagBattleUnit::getPosY(int nIndex)
{
	if (nIndex < 0 || nIndex >= 5)
	{
		return 0;
	}
	return this.m_asPos[nIndex].m_nY;
}

int tagBattleUnit::getBushoNo()
{
	return this.m_nBushoNo;
}

int tagBattleUnit::getStatus()
{
	return this.m_nStatus;
}

bool tagBattleUnit::createSp1(int nIndex)
{
	ref tagSprite rfSp = this.getSp(nIndex);
	if (rfSp === NULL)
	{
		return false;
	}
	rfSp.delete();
	int nMaxX = -1;
	int nMaxY = -1;
	int i = 0;
	int cnt = this.m_sData.getCount();
	int nX = 0;
	int nY = 0;
	int nCgNo = 0;
	bool bMikata = this.m_nBushoNo < 21;
	tagSprite spWork;
	spWork.create(画面幅(), 画面高さ(), 0, 0, 0, 0);
	for (i = cnt; i > 0; --i)
	{
		nCgNo = this.getBlendNormal(this.m_sData.getPosIndex(i), nX, nY);
		if (this.blendUnit(1, spWork, nX, nY, nCgNo, 0))
		{
			nMaxX = _max(nX, nMaxX);
			nMaxY = _max(nY, nMaxY);
		}
	}
	nMaxX = normalize(nMaxX, 0, 画面幅());
	nMaxY = normalize(nMaxY, 0, 画面高さ());
	rfSp.create(nMaxX + 1, nMaxY + 1, 0, 0, 0, 0);
	this.copySp(bMikata, rfSp, spWork);
	spWork.delete();
	rfSp.setZ(401);
	this.setPos(nIndex, rfSp.getPosX(), rfSp.getPosY());
	return true;
}

bool tagBattleUnit::createSp2(int nIndex)
{
	ref tagSprite rfSp = this.getSp(nIndex);
	if (rfSp === NULL)
	{
		return false;
	}
	rfSp.delete();
	int nMaxX = -1;
	int nMaxY = -1;
	int i = 0;
	int cnt = this.m_sData.getCount();
	int nX = 0;
	int nY = 0;
	int nCgNo = 0;
	int nHosei = 0;
	bool bMikata = this.m_nBushoNo < 21;
	bool bHeal = 行動_自動回復(this.m_nActionNo);
	bool bRance = キャラ_番号(0, this.m_nBushoNo) == 1000;
	tagSprite spWork;
	spWork.create(画面幅(), 画面高さ(), 0, 0, 0, 0);
	for (i = cnt; i > 0; --i)
	{
		int nIndex = this.m_sData.getPosIndex(i);
		bool bSill = bRance && this.m_sData.getPlace(nIndex) == 2;
		nHosei = 0;
		if (!bHeal)
		{
			if (bSill)
			{
				nCgNo = this.getBlendNormal(nIndex, nX, nY);
			}
			else
			{
				nCgNo = this.getBlendAttack(nIndex, nX, nY, nHosei);
			}
		}
		else if (bSill)
		{
			nCgNo = this.getBlendAttack(nIndex, nX, nY, nHosei);
		}
		else
		{
			nCgNo = this.getBlendNormal(nIndex, nX, nY);
		}
		if (this.blendUnit(2, spWork, nX, nY, nCgNo, nHosei))
		{
			nMaxX = _max(nX, nMaxX);
			nMaxY = _max(nY, nMaxY);
		}
	}
	int idx = 0;
	int cnt2 = this.m_nCount - cnt;
	if (bHeal)
	{
		goto label0;
	}
	if (!this.m_sData.getAttack())
	{
		goto label0;
	}
	if (cnt2 <= 0)
	{
		goto label0;
	}
	for (i = cnt; i > 0; --i)
	{
		if (cnt2 <= 0)
		{
			break;
		}
		int nCgNo = this.getBlendAttack2(this.m_sData.getPosIndex(i), nX, nY);
		if (this.blendUnit(3, spWork, nX, nY, nCgNo, 30))
		{
			nMaxX = _max(nX, nMaxX);
			nMaxY = _max(nY, nMaxY);
			--cnt2;
		}
	}
label0:
	nMaxX = normalize(nMaxX, 0, 画面幅());
	nMaxY = normalize(nMaxY, 0, 画面高さ());
	rfSp.create(nMaxX + 1, nMaxY + 1, 0, 0, 0, 0);
	this.copySp(bMikata, rfSp, spWork);
	spWork.delete();
	rfSp.setZ(402);
	this.setPos(nIndex, rfSp.getPosX(), rfSp.getPosY());
	return true;
}

bool tagBattleUnit::blendUnit(int nMode, ref tagSprite spDst, ref int nDstX, ref int nDstY, int nCgNo, int nHosei)
{
	tagSprite spWork;
	if (spWork.setCG(nCgNo) < 0)
	{
		return false;
	}
	int nX = nDstX;
	int nY = nDstY;
	int nW = spWork.getWidth();
	int nH = spWork.getHeight();
	if (nW == 480 && nH == 370)
	{
		nX = 467;
		nY = 322;
		this.m_bLarge = true;
		goto label0;
	}
	if (nMode > 1)
	{
		nX += nW - 270;
		nY += nH - 270;
		nX += nHosei;
		if (nMode == 3)
		{
			nX += -267;
		}
	}
label0:
	int nX2 = (nX - nW) + 1;
	int nY2 = (nY - nH) + 1;
	drawGraph_BlendAMap(spDst, nX2, nY2, spWork, 0, 0, nW, nH);
	drawGraph_AddDA_DAxSA(spDst, nX2, nY2, spWork, 0, 0, nW, nH);
	spWork.delete();
	nDstX = nX;
	nDstY = nY;
	return true;
}

bool tagBattleUnit::copySp(bool bMikata, ref tagSprite spDst, ref tagSprite spSrc)
{
	int nW = 0;
	int nH = 0;
	int nX = 0;
	tagSprite spWork;
	if (!有効スプライト(spDst) || !有効スプライト(spSrc))
	{
		return false;
	}
	nW = spDst.getWidth();
	nH = spDst.getHeight();
	if (bMikata)
	{
		spDst.copyCg(0, 0, spSrc, 0, 0, nW, nH);
		spDst.setPos(0, 0);
	}
	else
	{
		nX = 画面幅() - nW;
		spWork.copyReverseLR(spSrc);
		spDst.copyCg(0, 0, spWork, nX, 0, nW, nH);
		spWork.delete();
		spDst.setPos(nX, 0);
	}
	return true;
}

int tagBattleUnit::getBlendNormal(int nIndex, ref int nX, ref int nY)
{
	if (nIndex < 0 || nIndex >= this.m_nCount)
	{
		return 0;
	}
	if (this.m_nCount == 1)
	{
		nX = 410;
		nY = 257;
	}
	else
	{
		nX = this.m_sData.getRight(nIndex);
		nY = this.m_sData.getBottom(nIndex);
	}
	return this.m_sData.getCgNo(nIndex);
}

int tagBattleUnit::getBlendAttack(int nIndex, ref int nX, ref int nY, ref int nHosei)
{
	int nCgNo = this.getBlendNormal(nIndex, nX, nY);
	if (nCgNo <= 0)
	{
		return 0;
	}
	int nPlace = this.m_sData.getPlace(nIndex);
	if (nPlace == 1)
	{
		nHosei = g_sUnitChara.getHosei(nCgNo);
		return g_sUnitChara.getAttackCgNo(nCgNo, this.m_nActionNo);
	}
	if (nPlace == 2)
	{
		nHosei = g_sUnitChara.getHosei(nCgNo);
		return g_sUnitChara.getAttackCgNo(nCgNo, this.m_nActionNo);
	}
	nHosei = this.m_sData.getAttack() ? 30 : 0;
	return this.getAttackCgNo(nCgNo, nPlace);
}

int tagBattleUnit::getBlendAttack2(int nIndex, ref int nX, ref int nY)
{
	if (nIndex < 0)
	{
		return 0;
	}
	nX = this.m_sData.getRight(nIndex);
	nY = this.m_sData.getBottom(nIndex);
	return this.getAttackCgNo2(this.m_sData.getCgNo(nIndex), this.m_sData.getPlace(nIndex));
}

int tagBattleUnit::getAttackCgNo(int nCgNo, int nPlace)
{
	int nType = キャラ_兵種(0, this.m_nBushoNo);
	int nCgNo2 = 0;
	if (nType == 1)
	{
		switch (nPlace)
		{
			case 11:
				if (乱数(100) > 20)
				{
					nCgNo2 = nCgNo + 5;
				}
				else
				{
					nCgNo2 = nCgNo + 6;
				}
				break;
			case 12:
				if (乱数(100) > 50)
				{
					nCgNo2 = nCgNo + 6;
				}
				else
				{
					nCgNo2 = nCgNo + 7;
				}
				break;
			default:
				break;
		}
		goto label0;
	}
	if (nType == 10)
	{
		switch (nPlace)
		{
			case 11:
				if (乱数(100) > 20)
				{
					nCgNo2 = nCgNo + 1;
				}
				else
				{
					nCgNo2 = nCgNo + 2;
				}
				break;
			case 12:
				if (乱数(100) > 50)
				{
					nCgNo2 = nCgNo + 1;
				}
				else
				{
					nCgNo2 = nCgNo + 2;
				}
				break;
			default:
				break;
		}
		goto label0;
	}
	int nHosei = this.m_sData.getHosei();
	nCgNo2 = g_sUnitData.getAttackCgNo(0, this.m_nBushoNo, nCgNo - nHosei, nPlace, this.m_nActionNo);
	if (nCgNo2 > 0)
	{
		nCgNo2 += nHosei;
	}
label0:
	return ＣＧあり(nCgNo2) ? nCgNo2 : nCgNo;
}

int tagBattleUnit::getAttackCgNo2(int nCgNo, int nPlace)
{
	if (nPlace != 11)
	{
		return 0;
	}
	int nType = キャラ_兵種(0, this.m_nBushoNo);
	int nCgNo2 = 0;
	if (nType == 1)
	{
		nCgNo2 = nCgNo + 7;
		return ＣＧあり(nCgNo2) ? nCgNo2 : nCgNo;
	}
	if (nType == 10)
	{
		return nCgNo + 2;
	}
	if (nType == 24)
	{
		return 17527 + 乱数(4);
	}
	return 0;
}

tagBattleUnitManager::tagBattleUnitManager()
{
	this.m_anCurrent.Fill(0, this.m_anCurrent.Numof(), -1);
	this.m_nSelectIndex = 0;
}

tagBattleUnitManager::~tagBattleUnitManager()
{
	this.delete();
}

void tagBattleUnitManager::create()
{
	int i = 0;
	int idx = 0;
	for (i = 11; i <= 16; ++i)
	{
		this.m_asUnit[idx++].create(i);
	}
	for (i = 21; i <= 26; ++i)
	{
		this.m_asUnit[idx++].create(i);
	}
}

void tagBattleUnitManager::delete()
{
	int i = 0;
	int cnt = this.m_asUnit.Numof();
	for (i = 0; i < cnt; ++i)
	{
		this.m_asUnit[i].delete();
	}
}

void tagBattleUnitManager::remake(int nBushoNo)
{
	int idx = this.search(nBushoNo);
	if (idx < 0)
	{
		return;
	}
	int i = 0;
	int cnt = this.m_anCurrent.Numof();
	ref tagBattleUnit rfUnit = this.m_asUnit[idx];
	for (i = 1; i <= cnt; ++i)
	{
		if (this.getCurrent(i) == idx)
		{
			this.moveOut(i, -1);
		}
	}
	rfUnit.delete();
	rfUnit.create(nBushoNo);
}

bool tagBattleUnitManager::moveIn(int nType, int nBushoNo, int nMoveTime)
{
	int idx = this.search(nBushoNo);
	if (idx < 0)
	{
		return false;
	}
	int idx2 = this.getCurrent(nType);
	if (idx == idx2)
	{
		return true;
	}
	this.moveOut(nType, nMoveTime);
	ref tagBattleUnit rfUnit = this.m_asUnit[idx];
	rfUnit.moveIn(nMoveTime < 0 ? 250 : nMoveTime, true);
	return this.setCurrent(nType, idx);
}

bool tagBattleUnitManager::moveOut(int nType, int nMoveTime)
{
	int idx = this.getCurrent(nType);
	if (idx < 0)
	{
		return false;
	}
	ref tagBattleUnit rfUnit = this.m_asUnit[idx];
	rfUnit.moveOut(nMoveTime < 0 ? 250 : nMoveTime, true);
	this.setCurrent(nType, -1);
	return true;
}

bool tagBattleUnitManager::moveDown(int nType, int nMoveTime)
{
	int idx = this.getCurrent(nType);
	if (idx < 0)
	{
		return false;
	}
	ref tagBattleUnit rfUnit = this.m_asUnit[idx];
	rfUnit.moveDown(nMoveTime < 0 ? 0 : nMoveTime, true);
	this.setCurrent(nType, -1);
	return true;
}

void tagBattleUnitManager::quake(int nWidth, int nHeight)
{
	int i = 0;
	int cnt = this.m_anCurrent.Numof();
	for (i = 0; i < cnt; ++i)
	{
		int idx = this.m_anCurrent[i];
		if (idx < 0)
		{
			continue;
		}
		this.m_asUnit[idx].quake(nWidth, nHeight);
	}
}

bool tagBattleUnitManager::setNormal(int nType)
{
	int idx = this.getCurrent(nType);
	if (idx < 0)
	{
		return false;
	}
	ref tagBattleUnit rfUnit = this.m_asUnit[idx];
	rfUnit.setStatus(0);
	return true;
}

bool tagBattleUnitManager::setAttack(int nType, int nActionNo)
{
	int idx = this.getCurrent(nType);
	if (idx < 0)
	{
		return false;
	}
	ref tagBattleUnit rfUnit = this.m_asUnit[idx];
	if (rfUnit.getStatus() != 1)
	{
		rfUnit.createSpAttack(nActionNo);
		rfUnit.setStatus(1);
	}
	return true;
}

bool tagBattleUnitManager::setYushaNormal(int nType)
{
	int idx = this.getCurrent(nType);
	if (idx < 0)
	{
		return false;
	}
	ref tagBattleUnit rfUnit = this.m_asUnit[idx];
	if (rfUnit.getStatus() != 2)
	{
		rfUnit.createSpYushaNormal();
		rfUnit.setStatus(2);
	}
	return true;
}

bool tagBattleUnitManager::setYushaAttack(int nType, int nActionNo)
{
	int idx = this.getCurrent(nType);
	if (idx < 0)
	{
		return false;
	}
	ref tagBattleUnit rfUnit = this.m_asUnit[idx];
	if (rfUnit.getStatus() != 3)
	{
		rfUnit.createSpYushaAttack(nActionNo);
		rfUnit.setStatus(3);
	}
	return true;
}

void tagBattleUnitManager::createSelect()
{
	int i = 0;
	int idx = 6;
	this.m_nSelectIndex = -1;
	this.deleteSelect();
	for (i = 0; i < 6; ++i)
	{
		this.m_asUnit[idx++].createSpNormal();
	}
}

void tagBattleUnitManager::deleteSelect()
{
	int i = 0;
	int idx = 6;
	for (i = 0; i < 6; ++i)
	{
		if (idx != this.m_nSelectIndex)
		{
			this.m_asUnit[idx++].deleteSp();
		}
	}
	this.m_nSelectIndex = -1;
}

void tagBattleUnitManager::resetSelect()
{
	if (this.m_nSelectIndex < 0)
	{
		return;
	}
	ref tagBattleUnit rfUnit = this.m_asUnit[this.m_nSelectIndex];
	rfUnit.moveOut(100, false);
	this.m_nSelectIndex = -1;
	this.setCurrent(2, -1);
}

bool tagBattleUnitManager::setSelect(int nBushoNo)
{
	if (nBushoNo <= 0)
	{
		this.resetSelect();
		return true;
	}
	int idx = this.search(nBushoNo);
	if (idx < 0)
	{
		return false;
	}
	if (idx == this.m_nSelectIndex)
	{
		return true;
	}
	this.resetSelect();
	ref tagBattleUnit rfUnit = this.m_asUnit[idx];
	rfUnit.moveIn(100, false);
	this.m_nSelectIndex = idx;
	return this.setCurrent(2, idx);
}

int tagBattleUnitManager::getStatus(int nType)
{
	int idx = this.getCurrent(nType);
	if (idx < 0)
	{
		return -1;
	}
	return this.m_asUnit[idx].getStatus();
}

bool tagBattleUnitManager::setCurrent(int nType, int nIndex)
{
	if (nType < 1 || nType > this.m_anCurrent.Numof())
	{
		return false;
	}
	this.m_anCurrent[nType - 1] = nIndex;
	return true;
}

int tagBattleUnitManager::getCurrent(int nType)
{
	if (nType < 1 || nType > this.m_anCurrent.Numof())
	{
		return -1;
	}
	return this.m_anCurrent[nType - 1];
}

int tagBattleUnitManager::search(int nBushoNo)
{
	if (nBushoNo <= 0)
	{
		return -1;
	}
	int i = 0;
	int cnt = this.m_asUnit.Numof();
	for (i = 0; i < cnt; ++i)
	{
		if (this.m_asUnit[i].getBushoNo() == nBushoNo)
		{
			return i;
		}
	}
	return -1;
}

