void メインループ()
{
	lint rr = 0;
	lint ii2 = 0;
	lint iim = 0;
	lint ii = 0;
	lint iic = 0;
	アイテム初期化();
	アイテム取得(31);
	アイテム取得(1);
	アイテム取得(2);
	アイテム取得(3);
	アイテム取得(4);
	Ｄ勢力(0, "その他", 0);
	Ｄ勢力(1, "織田家", 1);
	初期兵力(1);
	勢力[1].状態 = 0;
	固有武将登録(1, 31, 1001, 1);
	Ｄ勢力(2, "魔軍", 5);
	初期兵力(2);
	勢力[2].状態 = 0;
	Ｄ勢力(3, "武田家", 3);
	初期兵力(3);
	Ｄ勢力(4, "北条家", 3);
	初期兵力(4);
	Ｄ勢力(5, "上杉家", 3);
	初期兵力(5);
	Ｄ勢力(6, "島津家", 4);
	初期兵力(6);
	Ｄ勢力(7, "巫女機関", 2);
	初期兵力(7);
	Ｄ勢力(8, "浅井朝倉家", 2);
	初期兵力(8);
	Ｄ勢力(9, "種子島家", 1);
	初期兵力(9);
	Ｄ勢力(10, "明石家", 1);
	初期兵力(10);
	Ｃ難易度[60] = 30;
	Ｄ勢力(11, "伊賀家", 1);
	初期兵力(11);
	Ｄ勢力(12, "原家", 1);
	初期兵力(12);
	Ｄ勢力(13, "足利家", 1);
	初期兵力(13);
	Ｄ勢力(14, "天志教", 2);
	初期兵力(14);
	Ｄ勢力(15, "タクガ家", 2);
	初期兵力(15);
	Ｄ勢力(16, "独眼流家", 6);
	初期兵力(16);
	Ｄ勢力(17, "今川家", 1);
	初期兵力(17);
	Ｄ勢力(18, "徳川家", 2);
	初期兵力(18);
	Ｃ難易度[68] = 30;
	Ｄ勢力(19, "毛利家", 5);
	初期兵力(19);
	Ｄ勢力(20, "捕虜", 0);
	Ｄ勢力(21, "在野武将", 0);
	gs[1][ＧＳ番号取得(1000, 999)].アイテム = 31;
	rr = 1;
	if (クリアフラグ(1, 0) == 1)
	{
		選択肢(0, "用何種模式玩？");
		選択肢(1, "通常模式");
		選択肢(2, "全国版");
		rr = 選択(false, 0, 0);
		if (rr == 2)
		{
			◆予備０１ = 1;
			jump 全国版ＴＯＰ;
		}
	}
	if (クリアフラグ(1, 0) == 1)
	{
		モード選択();
	}
	else
	{
		モード選択クリアフラグなし();
	}
	for (ii2 = 2; ii2 < 32; ii2++)
	{
		if (ＧＦ[84] > 0)
		{
			軍事力増加(ii2);
		}
	}
	ii = 1;
	for (iic = 1; iic < 31; iic++)
	{
		if (gs[ii][iic].番号 != 0 && gs[ii][iic].兵数最大 > 500)
		{
			gs[ii][iic].兵数最大 = 400;
			gs[ii][iic].兵数 = 400;
		}
	}
	if (ＧＦ[19] == 1)
	{
		ii2 = 5;
		勢力[ii2].軍事力 += 3;
		勢力スタート(ii2);
		勢力[ii2].状態 = 2;
		勢力[ii2].看板 = 1;
		キャラ消去(1048, ii2);
		キャラ消去(1049, ii2);
		EV("上杉／初登場", 1);
		EV("謙信／仕官", 1);
		EV("直江／仕官", 1);
		キャラ重要変更(0, 1048, 999);
		キャラ重要変更(0, 1049, 999);
	}
	if (ＧＦ[20] == 1)
	{
		ii2 = 3;
		勢力[ii2].軍事力 += 3;
		勢力スタート(ii2);
		勢力[ii2].状態 = 2;
		勢力[ii2].看板 = 1;
		キャラ消去(1056, ii2);
		キャラ消去(1054, ii2);
		キャラ消去(1053, ii2);
		キャラ消去(1055, ii2);
		EV("武田／初登場", 1);
		キャラ重要変更(0, 1056, 999);
		キャラ重要変更(0, 1054, 999);
		キャラ重要変更(0, 1053, 999);
		キャラ重要変更(0, 1055, 999);
	}
	if (ＧＦ[21] == 1)
	{
		ii2 = 19;
		勢力[ii2].軍事力 += 3;
		勢力スタート(ii2);
		勢力[ii2].状態 = 2;
		勢力[ii2].看板 = 1;
		キャラ消去(1035, ii2);
		キャラ消去(1036, ii2);
		キャラ消去(1037, ii2);
		キャラ消去(1038, ii2);
		EV("毛利／明石攻撃", 1);
		EV("毛利／陥落Ａ", 1);
		EV("毛利／元就の呪いが解ける", 1);
		キャラ重要変更(0, 1035, 999);
		ＡＣＦ(1035, 1);
		iic = ＧＳ番号取得(1035, 999);
		gs[ii][iic].個人 = 0;
		gs[ii][iic].兵数最大 = 500;
		gs[ii][iic].兵数 = 500;
		gs[ii][iic].技３ = 182;
		gs[ii][iic].技４ = 92;
		gs[ii][iic].ＣＧ = 427;
		gs[ii][iic].ＵＮ１ = 13082;
		キャラ重要変更(0, 1036, 999);
		キャラ重要変更(0, 1037, 999);
		キャラ重要変更(0, 1038, 999);
	}
	if (ＧＦ[22] == 1)
	{
		ii2 = 4;
		勢力[ii2].軍事力 += 3;
		勢力スタート(ii2);
		勢力[ii2].状態 = 2;
		勢力[ii2].看板 = 1;
		キャラ消去(1050, ii2);
		キャラ消去(1051, ii2);
		キャラ消去(1052, ii2);
		EV("北条／登場", 1);
		EV("北条／ミナモト発生", 1);
		ＡＣＦ(1050, 1);
		キャラ重要変更(0, 1050, 999);
		キャラ重要変更(0, 1051, 999);
		キャラ重要変更(0, 1052, 999);
	}
	if (ＧＦ[23] == 1)
	{
		ii2 = 16;
		勢力[ii2].軍事力 += 3;
		勢力スタート(ii2);
		勢力[ii2].状態 = 2;
		勢力[ii2].看板 = 1;
		キャラ消去(1012, ii2);
		キャラ消去(1013, ii2);
		キャラ消去(1015, ii2);
		キャラ消去(1016, ii2);
		キャラ消去(1014, ii2);
		EV("伊達／開始", 1);
		EV("政宗／お町復活", 1);
		EV("政宗／殺生石", 1);
		EV("伊達／妖怪帝国について聞く", 1);
		キャラ重要変更(0, 1012, 999);
		キャラ重要変更(0, 1013, 999);
		キャラ重要変更(0, 1014, 999);
		キャラ重要変更(0, 1015, 999);
		キャラ重要変更(0, 1016, 999);
	}
	if (アイテム確認(86, 0, 999) == 1)
	{
		EV("作戦許可書の説明", 1);
	}
	プロローグＡ();
	キャラ参加登録２(1010, 1000, 1011, 1115, 1116, 0);
	ＦＰ一時登録汎用(21, "久保田法眼", 10, 1, 1, 5211);
	gs[0][21].兵数最大 = 200;
	gs[0][21].兵数 = 200;
	ＦＰ一時登録汎用(22, "織田信行", 10, 3, 1, 5192);
	gs[0][22].兵数最大 = 230;
	gs[0][22].兵数 = 230;
	gs[0][22].ＣＧ = 5192;
	ＦＰ一時登録汎用(23, "久保田亜月", 1, 1, 1, 5322);
	gs[0][23].兵数最大 = 130;
	gs[0][23].兵数 = 130;
	ＦＰ一時登録汎用(25, "平沼元", 10, 5, 1, 5215);
	gs[0][25].兵数最大 = 187;
	gs[0][25].兵数 = 187;
	◆特定戦闘 = 61;
	if (イベント合戦処理(1, 1) == 0)
	{
		ＧＡＭＥＯＶＥＲ(10);
	}
	◆特定戦闘 = 0;
	プロローグＢ();
	jump メインループ／先頭;
}

#メインループ／先頭()
{
	lint loop = 0;
	lint loop2 = 0;
	◆ターン++;
	◆ＴＳ = 0;
	◆敵ＴＳ = 0;
	ＧＦ[93] = 0;
	ＧＦ[4] = 0;
	ＧＦ[25] = 0;
	ＧＦ[27] = 0;
	ＧＦ[163] = 0;
	ＧＦ[8]--;
	if (◆ターン % 4 == 0)
	{
		EV("佐渡／ボタン狩りＢ", 0);
		EV("尾張／ボタン狩りＢ", 0);
	}
	if (◆ターン % 8 == 0)
	{
		EV("中っ国／パンダ狩りＢ", 0);
		EV("上総／パンダ狩りＢ", 0);
	}
	if (ＧＦ[24] != 0 && ◆ターン % 2 == 0)
	{
		ＧＦ[24]++;
	}
	if (ＧＦ[24] > 49)
	{
		ＧＦ[24] = 49;
	}
	◆◆++;
	if (◆◆ > 4)
	{
		◆◆ = 1;
	}
	for (loop = 1; loop < 99; loop++)
	{
		if (勢力[loop].残追加武将 == 0 && ◆◆ == 1)
		{
			勢力[loop].残追加武将 = 1;
		}
		勢力[loop].混乱状態 = 0;
	}
	for (loop = 1; loop < 99; loop++)
	{
		if (国[loop].合戦準備 != 0)
		{
			国[loop].合戦準備 -= 3;
		}
		if (国[loop].支配国 == 1 && 国[loop].臨時徴収 != 0)
		{
			上限加算関数(100, 国[loop].臨時徴収, 5000);
		}
		if (国[loop].支配国 == 1 && 勢力[14].状態 == 2)
		{
			国[loop].一揆確率 += RAND(20);
		}
		for (loop2 = 1; loop2 < 9; loop2++)
		{
			if (国[loop].要害[loop2] > 0)
			{
				if (ＧＦ[84] == 0)
				{
					国[loop].要害[loop2] += 10;
				}
				else
				{
					国[loop].要害[loop2] += 2;
				}
				if (国[loop].要害[loop2] < 30)
				{
					国[loop].要害[loop2] = 30;
				}
				if (国[loop].要害[loop2] > 100)
				{
					国[loop].要害[loop2] = 100;
				}
			}
		}
	}
	LOG_TADA("■ターン（" + string(◆ターン) + "）■■■■■■■■■■■■■■■■■■\n");
	LOG_TADA("　　難易度（" + string(ＧＦ[84]) + "）\n");
	LOG_TADA("　　中立国　" + string(勢力状態数取得(1)) + "\n");
	LOG_TADA("　　滅亡国　" + string(勢力状態数取得(9)) + "\n");
	LOG_TADA("　　交戦国　" + string(勢力状態数取得(2)) + "\n");
	LOG_TADA("　　支配国　" + string(勢力状態数取得(3)) + "\n");
	フラグ調整();
	勢力順番シャッフル();
	ＰターントップＥＦ(◆ターン);
	味方勢力ターン();
	jump メインループ／終了;
}

#メインループ／終了()
{
	lint loop = 0;
	lint iic = 0;
	lint ii = 0;
	lint aa = 0;
	if (ＧＦ[30] == 1)
	{
		ＧＦ[30] = 0;
		jump メインループ／先頭;
	}
	if (勢力順番.Numof() < 99)
	{
		勢力順番.Realloc(99);
	}
	for (loop = 3; loop < 99; loop++)
	{
		敵勢力ターン(勢力順番[loop]);
	}
	敵勢力ターン(2);
	if (◆予備０８ != 1)
	{
		その他イベント();
	}
	ii = ◆Ｐｉｉ;
	ＧＦ[116] = 0;
	for (iic = 1; iic < 31; iic++)
	{
		if (gs[ii][iic].番号 != 0 && gs[ii][iic].兵数 < gs[ii][iic].兵数最大 && gs[ii][iic].兵数最大 < 9999)
		{
			if (gs[ii][iic].兵種 == 20)
			{
				continue;
			}
			aa = 倍率計算関数(gs[ii][iic].兵数最大, 5);
			if (aa > 50)
			{
				aa = 50;
			}
			if (gs[ii][iic].行動 == 0)
			{
				aa = 倍率計算関数(gs[ii][iic].兵数最大, 20);
				ＧＦ[116]++;
			}
			if (aa > 100)
			{
				aa = 100;
			}
			if (gs[ii][iic].兵種 == 7)
			{
				aa = 99999;
			}
			if (gs[ii][iic].技能 == 787)
			{
				aa = 99999;
			}
			Ｃ兵数補充(aa, iic, 999);
		}
		if (gs[ii][iic].番号 == 1072 && gs[ii][iic].行動 == 0)
		{
			ＧＦ[101]++;
			ＧＦ[149] = ◆ターン + 1;
		}
		if (gs[ii][iic].番号 == 1072 && gs[ii][iic].行動 == 1)
		{
			ＧＦ[101]--;
		}
	}
	if (◆コマンド実行数 != 0)
	{
		lint ra = 0;
		ra = RAND(6);
		if (ra == 1)
		{
			エロ記録(69, 1);
		}
		if (ra == 2)
		{
			エロ記録(70, 1);
		}
		if (ra == 3)
		{
			エロ記録(71, 1);
		}
		if (ra == 4)
		{
			エロ記録(72, 1);
		}
		if (ra == 5)
		{
			エロ記録(73, 1);
		}
		if (ra == 6)
		{
			エロ記録(74, 1);
		}
	}
	jump メインループ／先頭;
}

void 勢力順番シャッフル()
{
	lint loop = 0;
	lint aa1 = 0;
	lint aa2 = 0;
	lint aa3 = 0;
	for (loop = 1; loop < 41; loop++)
	{
		勢力順番[loop] = loop;
	}
	for (loop = 1; loop < 10; loop++)
	{
		aa1 = RAND(17) + 2;
		aa2 = RAND(17) + 2;
		勢力順番[aa1] <=> 勢力順番[aa2];
	}
}

lint モード選択()
{
	lint rr = 0;
	lint aa = 0;
	lint ii = 0;
	lint iic = 0;
	lint ▲国力１ = 0;
	lint ▲国力２ = 0;
	lint ▲国力３ = 0;
	lint ▲武士１ = 0;
	lint ▲武士２ = 0;
	lint ▲武士３ = 0;
	lint ▲武士４ = 0;
	lint ▲武士５ = 0;
	lint ▲武士６ = 0;
	lint ▲武士７ = 0;
	lint ▲武士８ = 0;
	lint ▲武士９ = 0;
	string 文字列 = "";
	ＧＦ[141] = クリアフラグ(9, 0);
	◆ゲームモード = 1;
	◆コマンド実行数最大 = 2;
	ＧＦ[151] = 0;
	選択肢(0, "模式選擇");
	選択肢(1, "◆從第一部開始◆");
	選択肢(40, "◆從第二部開始◆");
	rr = 選択(false, 0, 0);
	if (rr == 40)
	{
		ＧＦ[382] = 1;
		◆予備０８ = 1;
		キャラ消去(1000, 999);
		武将強制登録(1, 1000, 0);
		Ｃアイテム変更(31, 1000, 999);
		武将強制登録(1, 1002, 0);
		武将強制登録(1, 1182, 0);
		武将強制登録(1, 1154, 0);
		武将強制登録(1, 1155, 0);
		第二部開始();
		jump メインループ／先頭;
	}
	文字列 = "最高点(" + string(クリアフラグ(9, 0)) + "）＋";
	if (クリアフラグ(1, 0) == 1)
	{
		文字列 += "正史";
		ＧＦ[141] += 5;
	}
	if (クリアフラグ(2, 0) == 1)
	{
		文字列 += "、謙信";
		ＧＦ[141] += 5;
	}
	if (クリアフラグ(3, 0) == 1)
	{
		文字列 += "、五十六";
		ＧＦ[141] += 5;
	}
	if (クリアフラグ(4, 0) == 1)
	{
		文字列 += "、蘭";
		ＧＦ[141] += 5;
	}
	for (; ; )
	{
		選択肢(0, "使用可能ポイント　［" + string(ＧＦ[141]) + "］");
		選択肢(0, 文字列);
		選択肢(1, "◆ゲームを始める◆");
		選択肢(2, "難易度選択(第一部)");
		選択肢(3, "勢力キャラ追加ボーナス");
		選択肢(31, "特殊キャラ追加ボーナス");
		選択肢(5, "アイテム追加ボーナス１");
		選択肢(6, "アイテム追加ボーナス２");
		選択肢(7, "アイテム追加ボーナス３");
		選択肢(8, "アイテム追加ボーナス４");
		選択肢(4, "各種ボーナス");
		rr = 選択(false, 0, 0);
		if (rr == 1)
		{
			return 1;
		}
		if (rr == 2)
		{
			for (; ; )
			{
				if (ＧＦ[84] == 0)
				{
					文字列 = "現難易度［標準］";
				}
				if (ＧＦ[84] == 1)
				{
					文字列 = "現難易度［★］";
				}
				if (ＧＦ[84] == 2)
				{
					文字列 = "現難易度［★★］";
				}
				if (ＧＦ[84] == 3)
				{
					文字列 = "現難易度［★★★★★］";
				}
				選択肢(0, 文字列);
				選択肢(1, "標準　　　（初期得点　６０）");
				選択肢(2, "★　　　　（初期得点１２０）");
				選択肢(3, "★★　　　（初期得点１５０）");
				選択肢(4, "★★★★★（初期得点２００）");
				選択肢(99, "戻る");
				rr = 選択(true, 0, 0);
				if (rr == 99 || rr == 0)
				{
					break;
				}
				if (rr == 1)
				{
					ＧＦ[84] = 0;
					◆プレイ得点 = 60;
				}
				if (rr == 2)
				{
					ＧＦ[84] = 1;
					◆プレイ得点 = 120;
				}
				if (rr == 3)
				{
					ＧＦ[84] = 2;
					◆プレイ得点 = 150;
				}
				if (rr == 4)
				{
					ＧＦ[84] = 3;
					◆プレイ得点 = 200;
				}
			}
		}
		if (rr == 3)
		{
			for (; ; )
			{
				選択肢(0, "※キャラ追加、シナリオの辻褄が若干変になりますがご了承下さい");
				選択肢(0, "使用可能ポイント　［" + string(ＧＦ[141]) + "］");
				if (クリアフラグ(12, 0) == 1)
				{
					if (ＧＦ[19] == 0)
					{
						選択肢(10, "□　上杉系を仲間に　　要２０Ｐ");
					}
					if (ＧＦ[19] == 1)
					{
						選択肢(11, "■　上杉系を仲間に　　−−−−");
					}
				}
				else
				{
					選択肢(12, "？　まだ選択出来ません");
				}
				if (クリアフラグ(11, 0) == 1)
				{
					if (ＧＦ[20] == 0)
					{
						選択肢(20, "□　武田系を仲間に　　要４０Ｐ");
					}
					if (ＧＦ[20] == 1)
					{
						選択肢(21, "■　武田系を仲間に　　−−−−");
					}
				}
				else
				{
					選択肢(22, "？　まだ選択出来ません");
				}
				if (クリアフラグ(13, 0) == 1)
				{
					if (ＧＦ[21] == 0)
					{
						選択肢(30, "□　毛利系を仲間に　　要２０Ｐ");
					}
					if (ＧＦ[21] == 1)
					{
						選択肢(31, "■　毛利系を仲間に　　−−−−");
					}
				}
				else
				{
					選択肢(32, "？　まだ選択出来ません");
				}
				if (クリアフラグ(14, 0) == 1)
				{
					if (ＧＦ[22] == 0)
					{
						選択肢(40, "□　北条系を仲間に　　要１５Ｐ");
					}
					if (ＧＦ[22] == 1)
					{
						選択肢(41, "■　北条系を仲間に　　−−−−");
					}
				}
				else
				{
					選択肢(42, "？　まだ選択出来ません");
				}
				if (クリアフラグ(15, 0) == 1)
				{
					if (ＧＦ[23] == 0)
					{
						選択肢(50, "□　独眼流系を仲間　　要２０Ｐ");
					}
					if (ＧＦ[23] == 1)
					{
						選択肢(51, "■　独眼流系を仲間　　−−−−");
					}
				}
				else
				{
					選択肢(52, "？　まだ選択出来ません");
				}
				if (◆予備０３ == 0)
				{
					選択肢(60, "□　籐吉郎を殺せる　　要１０Ｐ　");
				}
				if (◆予備０３ == 1)
				{
					選択肢(61, "■　籐吉郎を殺せる　　−−−−　");
				}
				if (◆予備０７ == 0)
				{
					選択肢(70, "□　追加キャラ　　　　要２０Ｐ");
				}
				if (◆予備０７ == 1)
				{
					選択肢(71, "■　追加キャラ　　　　−−−−");
				}
				選択肢(99, "戻る");
				rr = 選択(true, 0, 0);
				if (rr == 99 || rr == 0)
				{
					break;
				}
				if (rr == 60 && ＧＦ[141] > 9)
				{
					◆予備０３ = 1;
					ＧＦ[141] -= 10;
				}
				if (rr == 61)
				{
					◆予備０３ = 0;
					ＧＦ[141] += 10;
				}
				if (rr == 70 && ＧＦ[141] > 19)
				{
					◆予備０７ = 1;
					ＧＦ[141] -= 20;
				}
				if (rr == 71)
				{
					◆予備０７ = 0;
					ＧＦ[141] += 20;
				}
				if (rr == 10 && ＧＦ[141] > 19)
				{
					ＧＦ[19] = 1;
					ＧＦ[141] -= 20;
					武将強制登録(1, 1048, 0);
					武将強制登録(1, 1049, 0);
					フラグ調整();
					マップ_情報更新(true);
				}
				if (rr == 11)
				{
					ＧＦ[19] = 0;
					ＧＦ[141] += 20;
					キャラ消去(1048, 999);
					キャラ消去(1049, 999);
					フラグ調整();
					マップ_情報更新(true);
				}
				if (rr == 20 && ＧＦ[141] > 39)
				{
					ＧＦ[20] = 1;
					ＧＦ[141] -= 40;
					武将強制登録(1, 1056, 0);
					武将強制登録(1, 1053, 0);
					武将強制登録(1, 1054, 0);
					武将強制登録(1, 1055, 0);
					フラグ調整();
					マップ_情報更新(true);
				}
				if (rr == 21)
				{
					ＧＦ[20] = 0;
					ＧＦ[141] += 40;
					キャラ消去(1056, 999);
					キャラ消去(1054, 999);
					キャラ消去(1053, 999);
					キャラ消去(1055, 999);
					フラグ調整();
					マップ_情報更新(true);
				}
				if (rr == 30 && ＧＦ[141] > 19)
				{
					ＧＦ[21] = 1;
					ＧＦ[141] -= 20;
					武将強制登録(1, 1036, 0);
					武将強制登録(1, 1037, 0);
					武将強制登録(1, 1038, 0);
					武将強制登録(1, 1035, 0);
					フラグ調整();
					マップ_情報更新(true);
				}
				if (rr == 31)
				{
					ＧＦ[21] = 0;
					ＧＦ[141] += 20;
					キャラ消去(1036, 999);
					キャラ消去(1037, 999);
					キャラ消去(1038, 999);
					キャラ消去(1035, 999);
					フラグ調整();
					マップ_情報更新(true);
				}
				if (rr == 40 && ＧＦ[141] > 14)
				{
					ＧＦ[22] = 1;
					ＧＦ[141] -= 15;
					武将強制登録(1, 1051, 0);
					武将強制登録(1, 1052, 0);
					フラグ調整();
					マップ_情報更新(true);
				}
				if (rr == 41)
				{
					ＧＦ[22] = 0;
					ＧＦ[141] += 15;
					キャラ消去(1050, 999);
					キャラ消去(1051, 999);
					キャラ消去(1052, 999);
					フラグ調整();
					マップ_情報更新(true);
				}
				if (rr == 50 && ＧＦ[141] > 19)
				{
					ＧＦ[23] = 1;
					ＧＦ[141] -= 20;
					武将強制登録(1, 1012, 0);
					武将強制登録(1, 1013, 0);
					武将強制登録(1, 1014, 0);
					武将強制登録(1, 1015, 0);
					武将強制登録(1, 1016, 0);
					フラグ調整();
					マップ_情報更新(true);
				}
				if (rr == 51)
				{
					ＧＦ[23] = 0;
					ＧＦ[141] += 20;
					キャラ消去(1012, 999);
					キャラ消去(1013, 999);
					キャラ消去(1014, 999);
					キャラ消去(1015, 999);
					キャラ消去(1016, 999);
					フラグ調整();
					マップ_情報更新(true);
				}
			}
		}
		if (rr == 31)
		{
			for (; ; )
			{
				選択肢(0, "使用可能ポイント　［" + string(ＧＦ[141]) + "］");
				if (▲武士１ == 0)
				{
					選択肢(61, "□　凰火朱鷺（武士）　要０５Ｐ");
				}
				if (▲武士１ == 1)
				{
					選択肢(62, "■　凰火朱鷺（武士）　−−−−");
				}
				if (▲武士２ == 0)
				{
					選択肢(63, "□　なつみパパ（忍者）要０５Ｐ");
				}
				if (▲武士２ == 1)
				{
					選択肢(64, "■　なつみパパ（忍者）−−−−");
				}
				if (▲武士３ == 0)
				{
					選択肢(65, "□　エリナ（陰陽）　　要０５Ｐ");
				}
				if (▲武士３ == 1)
				{
					選択肢(66, "■　エリナ（陰陽）　　−−−−");
				}
				if (▲武士４ == 0)
				{
					選択肢(67, "□　ターバン（足軽）　要０５Ｐ");
				}
				if (▲武士４ == 1)
				{
					選択肢(68, "■　ターバン（足軽）　−−−−");
				}
				if (▲武士５ == 0)
				{
					選択肢(69, "□　黒崎壱哉（軍師）　要０５Ｐ");
				}
				if (▲武士５ == 1)
				{
					選択肢(70, "■　黒崎壱哉（軍師）　−−−−");
				}
				if (▲武士６ == 0)
				{
					選択肢(71, "□　森田愛（武士）　　要０５Ｐ");
				}
				if (▲武士６ == 1)
				{
					選択肢(72, "■　森田愛（武士）　　−−−−");
				}
				if (▲武士７ == 0)
				{
					選択肢(73, "□　魔窟堂（僧兵）　　要０５Ｐ");
				}
				if (▲武士７ == 1)
				{
					選択肢(74, "■　魔窟堂（僧兵）　　−−−−");
				}
				if (▲武士８ == 0)
				{
					選択肢(75, "□　蓮間香苗（巫女）　要０５Ｐ");
				}
				if (▲武士８ == 1)
				{
					選択肢(76, "■　蓮間香苗（巫女）　−−−−");
				}
				if (▲武士９ == 0)
				{
					選択肢(77, "□　高倉仮名（鉄砲）　要０５Ｐ");
				}
				if (▲武士９ == 1)
				{
					選択肢(78, "■　高倉仮名（鉄砲）　−−−−");
				}
				選択肢(99, "戻る");
				rr = 選択(true, 0, 0);
				if (rr == 99 || rr == 0)
				{
					break;
				}
				if (rr == 61 && ＧＦ[141] > 4)
				{
					▲武士１ = 1;
					ＧＦ[141] -= 5;
					武将強制登録(1, 1167, 0);
					フラグ調整();
					マップ_情報更新(true);
				}
				if (rr == 62)
				{
					▲武士１ = 0;
					ＧＦ[141] += 5;
					キャラ消去(1167, 999);
					フラグ調整();
					マップ_情報更新(true);
				}
				if (rr == 63 && ＧＦ[141] > 4)
				{
					▲武士２ = 1;
					ＧＦ[141] -= 5;
					武将強制登録(1, 1139, 0);
					キャラ重要変更(0, 1139, 999);
					フラグ調整();
					マップ_情報更新(true);
				}
				if (rr == 64)
				{
					▲武士２ = 0;
					ＧＦ[141] += 5;
					キャラ消去(1139, 999);
					フラグ調整();
					マップ_情報更新(true);
				}
				if (rr == 65 && ＧＦ[141] > 4)
				{
					▲武士３ = 1;
					ＧＦ[141] -= 5;
					武将強制登録(1, 1201, 0);
					フラグ調整();
					マップ_情報更新(true);
				}
				if (rr == 66)
				{
					▲武士３ = 0;
					ＧＦ[141] += 5;
					キャラ消去(1201, 999);
					フラグ調整();
					マップ_情報更新(true);
				}
				if (rr == 67 && ＧＦ[141] > 4)
				{
					▲武士４ = 1;
					ＧＦ[141] -= 5;
					武将強制登録(1, 1202, 0);
					フラグ調整();
					マップ_情報更新(true);
				}
				if (rr == 68)
				{
					▲武士４ = 0;
					ＧＦ[141] += 5;
					キャラ消去(1202, 999);
					フラグ調整();
					マップ_情報更新(true);
				}
				if (rr == 69 && ＧＦ[141] > 4)
				{
					▲武士５ = 1;
					ＧＦ[141] -= 5;
					武将強制登録(1, 1203, 0);
					フラグ調整();
					マップ_情報更新(true);
				}
				if (rr == 70)
				{
					▲武士５ = 0;
					ＧＦ[141] += 5;
					キャラ消去(1203, 999);
					フラグ調整();
					マップ_情報更新(true);
				}
				if (rr == 71 && ＧＦ[141] > 4)
				{
					▲武士６ = 1;
					ＧＦ[141] -= 5;
					武将強制登録(1, 1204, 0);
					フラグ調整();
					マップ_情報更新(true);
				}
				if (rr == 72)
				{
					▲武士６ = 0;
					ＧＦ[141] += 5;
					キャラ消去(1204, 999);
					フラグ調整();
					マップ_情報更新(true);
				}
				if (rr == 73 && ＧＦ[141] > 4)
				{
					▲武士７ = 1;
					ＧＦ[141] -= 5;
					武将強制登録(1, 1205, 0);
					フラグ調整();
					マップ_情報更新(true);
				}
				if (rr == 74)
				{
					▲武士７ = 0;
					ＧＦ[141] += 5;
					キャラ消去(1205, 999);
					フラグ調整();
					マップ_情報更新(true);
				}
				if (rr == 75 && ＧＦ[141] > 4)
				{
					▲武士８ = 1;
					ＧＦ[141] -= 5;
					武将強制登録(1, 1206, 0);
					フラグ調整();
					マップ_情報更新(true);
				}
				if (rr == 76)
				{
					▲武士８ = 0;
					ＧＦ[141] += 5;
					キャラ消去(1206, 999);
					フラグ調整();
					マップ_情報更新(true);
				}
				if (rr == 77 && ＧＦ[141] > 4)
				{
					▲武士９ = 1;
					ＧＦ[141] -= 5;
					武将強制登録(1, 1207, 0);
					フラグ調整();
					マップ_情報更新(true);
				}
				if (rr == 78)
				{
					▲武士９ = 0;
					ＧＦ[141] += 5;
					キャラ消去(1207, 999);
					フラグ調整();
					マップ_情報更新(true);
				}
			}
		}
		if (rr == 4)
		{
			for (; ; )
			{
				選択肢(0, "使用可能ポイント　［" + string(ＧＦ[141]) + "］");
				if (◆金 == 3000)
				{
					選択肢(10, "□　金＋１００００　　　　要０５Ｐ");
				}
				if (◆金 == 13000)
				{
					選択肢(11, "■　金＋１００００　　　　−−−−");
				}
				if (◆コマンド実行数最大 == 2)
				{
					選択肢(20, "□　行動回数＋１　　　　　要１０Ｐ");
				}
				if (◆コマンド実行数最大 == 3)
				{
					選択肢(21, "■　行動回数＋１　　　　　−−−−");
				}
				if (アイテム確認(86, 0, 999) == 0)
				{
					選択肢(30, "□　作戦許可書５枚セット　要０５Ｐ");
				}
				if (アイテム確認(86, 0, 999) == 1)
				{
					選択肢(31, "■　作戦許可書５枚セット　−−−−");
				}
				if (▲国力１ == 0)
				{
					選択肢(40, "□　初期国力＋３　　　　　要０５Ｐ");
				}
				if (▲国力１ == 1)
				{
					選択肢(41, "■　初期国力＋３　　　　　−−−−");
				}
				if (▲国力２ == 0)
				{
					選択肢(50, "□　初期国力＋３　　　　　要０５Ｐ");
				}
				if (▲国力２ == 1)
				{
					選択肢(51, "■　初期国力＋３　　　　　−−−−");
				}
				if (▲国力３ == 0)
				{
					選択肢(60, "□　初期国力＋３　　　　　要０５Ｐ");
				}
				if (▲国力３ == 1)
				{
					選択肢(61, "■　初期国力＋３　　　　　−−−−");
				}
				選択肢(99, "戻る");
				rr = 選択(true, 0, 0);
				if (rr == 99 || rr == 0)
				{
					break;
				}
				if (rr == 10 && ＧＦ[141] > 4)
				{
					ＧＦ[141] -= 5;
					◆金 = 13000;
					マップ_情報更新(true);
				}
				if (rr == 11)
				{
					ＧＦ[141] += 5;
					◆金 = 3000;
					マップ_情報更新(true);
				}
				if (rr == 20 && ＧＦ[141] > 9)
				{
					◆コマンド実行数最大 = 3;
					ＧＦ[141] -= 10;
				}
				if (rr == 21)
				{
					◆コマンド実行数最大 = 2;
					ＧＦ[141] += 10;
				}
				if (rr == 30 && ＧＦ[141] > 4)
				{
					ＧＦ[141] -= 5;
					アイテム取得(86);
					アイテム取得(87);
					アイテム取得(88);
					アイテム取得(89);
					アイテム取得(90);
				}
				if (rr == 31)
				{
					ＧＦ[141] += 5;
					アイテム消去(86);
					アイテム消去(87);
					アイテム消去(88);
					アイテム消去(89);
					アイテム消去(90);
				}
				if (rr == 40 && ＧＦ[141] > 4)
				{
					▲国力１ = 1;
					ＧＦ[141] -= 5;
					ＧＦ[151] += 3;
					マップ_情報更新(true);
				}
				if (rr == 41)
				{
					▲国力１ = 0;
					ＧＦ[141] += 5;
					ＧＦ[151] -= 3;
					マップ_情報更新(true);
				}
				if (rr == 50 && ＧＦ[141] > 4)
				{
					▲国力２ = 1;
					ＧＦ[141] -= 5;
					ＧＦ[151] += 3;
					マップ_情報更新(true);
				}
				if (rr == 51)
				{
					▲国力２ = 0;
					ＧＦ[141] += 5;
					ＧＦ[151] -= 3;
					マップ_情報更新(true);
				}
				if (rr == 60 && ＧＦ[141] > 4)
				{
					▲国力３ = 1;
					ＧＦ[141] -= 5;
					ＧＦ[151] += 3;
					マップ_情報更新(true);
				}
				if (rr == 61)
				{
					▲国力３ = 0;
					ＧＦ[141] += 5;
					ＧＦ[151] -= 3;
					マップ_情報更新(true);
				}
			}
		}
		if (rr == 5)
		{
			for (; ; )
			{
				選択肢(0, "使用可能ポイント　［" + string(ＧＦ[141]) + "］");
				aa = 7;
				アイテム装備ボーナス選択肢(aa, 0, 2);
				aa = 21;
				アイテム装備ボーナス選択肢(aa, 0, 2);
				aa = 22;
				アイテム装備ボーナス選択肢(aa, 0, 2);
				aa = 23;
				アイテム装備ボーナス選択肢(aa, 0, 2);
				aa = 24;
				アイテム装備ボーナス選択肢(aa, 0, 2);
				aa = 64;
				アイテム装備ボーナス選択肢(aa, 20, 2);
				aa = 49;
				アイテム装備ボーナス選択肢(aa, 32, 2);
				aa = 50;
				アイテム装備ボーナス選択肢(aa, 33, 4);
				aa = 52;
				アイテム装備ボーナス選択肢(aa, 34, 2);
				選択肢(99, "戻る");
				rr = 選択(true, 0, 0);
				if (rr == 99 || rr == 0)
				{
					break;
				}
				aa = 7;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 21;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 22;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 23;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 24;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 64;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 49;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 50;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 4);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 4);
				}
				aa = 52;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
			}
		}
		if (rr == 6)
		{
			for (; ; )
			{
				選択肢(0, "使用可能ポイント　［" + string(ＧＦ[141]) + "］");
				aa = 36;
				アイテム装備ボーナス選択肢(aa, 22, 2);
				aa = 37;
				アイテム装備ボーナス選択肢(aa, 23, 2);
				aa = 38;
				アイテム装備ボーナス選択肢(aa, 24, 2);
				aa = 39;
				アイテム装備ボーナス選択肢(aa, 25, 2);
				aa = 40;
				アイテム装備ボーナス選択肢(aa, 26, 2);
				aa = 44;
				アイテム装備ボーナス選択肢(aa, 27, 2);
				aa = 45;
				アイテム装備ボーナス選択肢(aa, 28, 2);
				aa = 48;
				アイテム装備ボーナス選択肢(aa, 29, 2);
				aa = 47;
				アイテム装備ボーナス選択肢(aa, 30, 2);
				aa = 46;
				アイテム装備ボーナス選択肢(aa, 31, 2);
				選択肢(99, "戻る");
				rr = 選択(true, 0, 0);
				if (rr == 99 || rr == 0)
				{
					break;
				}
				aa = 36;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 37;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 38;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 39;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 40;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 44;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 45;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 48;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 47;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 46;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
			}
		}
		if (rr == 7)
		{
			for (; ; )
			{
				選択肢(0, "使用可能ポイント　［" + string(ＧＦ[141]) + "］");
				aa = 53;
				アイテム装備ボーナス選択肢(aa, 35, 2);
				aa = 54;
				アイテム装備ボーナス選択肢(aa, 36, 4);
				aa = 59;
				アイテム装備ボーナス選択肢(aa, 37, 2);
				aa = 58;
				アイテム装備ボーナス選択肢(aa, 38, 2);
				aa = 60;
				アイテム装備ボーナス選択肢(aa, 39, 2);
				aa = 61;
				アイテム装備ボーナス選択肢(aa, 40, 2);
				aa = 62;
				アイテム装備ボーナス選択肢(aa, 41, 2);
				aa = 63;
				アイテム装備ボーナス選択肢(aa, 42, 4);
				aa = 65;
				アイテム装備ボーナス選択肢(aa, 43, 2);
				aa = 66;
				アイテム装備ボーナス選択肢(aa, 44, 4);
				選択肢(99, "戻る");
				rr = 選択(true, 0, 0);
				if (rr == 99 || rr == 0)
				{
					break;
				}
				aa = 53;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 54;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 4);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 4);
				}
				aa = 59;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 58;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 60;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 61;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 62;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 63;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 4);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 4);
				}
				aa = 65;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 66;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 4);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 4);
				}
			}
		}
		if (rr == 8)
		{
			for (; ; )
			{
				選択肢(0, "使用可能ポイント　［" + string(ＧＦ[141]) + "］");
				aa = 67;
				アイテム装備ボーナス選択肢(aa, 45, 2);
				aa = 68;
				アイテム装備ボーナス選択肢(aa, 46, 2);
				aa = 69;
				アイテム装備ボーナス選択肢(aa, 47, 2);
				aa = 70;
				アイテム装備ボーナス選択肢(aa, 48, 2);
				aa = 76;
				アイテム装備ボーナス選択肢(aa, 49, 2);
				aa = 77;
				アイテム装備ボーナス選択肢(aa, 50, 2);
				aa = 78;
				アイテム装備ボーナス選択肢(aa, 51, 2);
				aa = 80;
				アイテム装備ボーナス選択肢(aa, 52, 2);
				aa = 81;
				アイテム装備ボーナス選択肢(aa, 53, 2);
				aa = 82;
				アイテム装備ボーナス選択肢(aa, 54, 2);
				aa = 83;
				アイテム装備ボーナス選択肢(aa, 55, 2);
				aa = 84;
				アイテム装備ボーナス選択肢(aa, 56, 2);
				選択肢(99, "戻る");
				rr = 選択(true, 0, 0);
				if (rr == 99 || rr == 0)
				{
					break;
				}
				aa = 67;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 68;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 69;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 70;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 76;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 77;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 78;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 80;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 81;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 82;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 83;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
				aa = 84;
				if (rr == aa)
				{
					アイテムボーナスＯＮ(aa, 2);
				}
				if (rr == aa + 100)
				{
					アイテムボーナスＯＦＦ(aa, 2);
				}
			}
		}
		if (rr == 90 && ＧＦ[141] > 0)
		{
			◆ゲームモード = 1;
			ＧＦ[141] -= 1;
		}
		if (rr == 91)
		{
			◆ゲームモード = 0;
			ＧＦ[141] += 1;
		}
	}
	return 0;
}

void アイテム装備ボーナス選択肢(lint aa, lint bb, lint 価値)
{
	string 文字列 = "";
	if (クリアフラグ(bb, 0) == 0 && bb != 0)
	{
		return;
	}
	文字列 = 固定文字列(アイテム[aa].名前, 8);
	if (アイテム[aa].個数 == 0 && 価値 == 2)
	{
		選択肢(aa + 0, "□　" + 文字列 + "　　要０２Ｐ");
	}
	if (アイテム[aa].個数 == 0 && 価値 == 4)
	{
		選択肢(aa + 0, "□　" + 文字列 + "　　要０４Ｐ");
	}
	if (アイテム[aa].個数 == 0 && 価値 == 8)
	{
		選択肢(aa + 0, "□　" + 文字列 + "　　要０８Ｐ");
	}
	if (アイテム[aa].個数 == 0 && 価値 == 16)
	{
		選択肢(aa + 0, "□　" + 文字列 + "　　要１６Ｐ");
	}
	if (アイテム[aa].個数 == 0 && 価値 == 32)
	{
		選択肢(aa + 0, "□　" + 文字列 + "　　要３２Ｐ");
	}
	if (アイテム[aa].個数 == 1)
	{
		選択肢(aa + 100, "■　" + 文字列 + "　　−−−−");
	}
}

void アイテムボーナスＯＮ(lint aa, lint 価値)
{
	if (ＧＦ[141] > 1 && 価値 == 2)
	{
		アイテム[aa].個数 = 1;
		ＧＦ[141] -= 2;
		return;
	}
	if (ＧＦ[141] > 3 && 価値 == 4)
	{
		アイテム[aa].個数 = 1;
		ＧＦ[141] -= 4;
		return;
	}
	if (ＧＦ[141] > 7 && 価値 == 8)
	{
		アイテム[aa].個数 = 1;
		ＧＦ[141] -= 8;
		return;
	}
	if (ＧＦ[141] > 15 && 価値 == 16)
	{
		アイテム[aa].個数 = 1;
		ＧＦ[141] -= 16;
		return;
	}
}

void アイテムボーナスＯＦＦ(lint aa, lint 価値)
{
	アイテム[aa].個数 = 0;
	if (価値 == 2)
	{
		ＧＦ[141] += 2;
	}
	if (価値 == 4)
	{
		ＧＦ[141] += 4;
	}
	if (価値 == 8)
	{
		ＧＦ[141] += 8;
	}
	if (価値 == 16)
	{
		ＧＦ[141] += 16;
	}
}

