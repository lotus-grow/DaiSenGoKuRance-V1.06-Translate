int 合戦敵_行動選択(int n武将番号)
{
	敵ターゲット_クリア(n武将番号);
	int n行動１ = キャラ_技１(0, n武将番号);
	int n行動２ = キャラ_技２(0, n武将番号);
	int n行動３ = キャラ_技３(0, n武将番号);
	int n行動４ = キャラ_技４(0, n武将番号);
	int n兵種 = キャラ_兵種(0, n武将番号);
	int n部隊数 = 合戦_敵数();
	int n残りターン = 戦闘時間_取得();
	int nターゲット = 0;
	if (n行動１ == 81)
	{
		if (キャラ_ダメージ率(0, n武将番号) >= 50)
		{
			if (合戦敵_行動チェック(n武将番号, n行動１, 80))
			{
				敵ターゲット_設定(n行動１, n武将番号);
				return n行動１;
			}
		}
	}
	if (行動_状態解除(n行動４))
	{
		int cnt = 合戦敵_付与数();
		if (cnt >= 5 && 合戦敵_行動チェック(n武将番号, n行動４, 100))
		{
			敵ターゲット_選択(n武将番号, n行動４);
			return n行動４;
		}
		if (cnt >= 1 && 合戦敵_行動チェック(n武将番号, n行動４, 50))
		{
			敵ターゲット_選択(n武将番号, n行動４);
			return n行動４;
		}
	}
	if (n兵種 == 3 || n兵種 == 102 || n兵種 == 103)
	{
		if (戦闘_敵前衛(n武将番号) && 合戦敵_兵種チェック２(3, 4) || 戦闘_敵後衛(n武将番号) && 合戦敵_兵種チェック２(3, 5))
		{
			if (合戦敵_行動チェック(n武将番号, n行動１, 70))
			{
				敵ターゲット_選択(n武将番号, n行動１);
				return n行動１;
			}
		}
	}
	if (n兵種 == 6)
	{
		nターゲット = 敵ターゲット_準備中選択(n行動３);
		if (nターゲット > 0)
		{
			if (合戦敵_行動チェック(n武将番号, n行動３, 80))
			{
				return n行動３;
			}
		}
	}
	if (n兵種 == 9)
	{
		nターゲット = 敵ターゲット_回復選択(n行動１, 50);
		if (nターゲット > 0)
		{
			if (合戦敵_行動チェック(n武将番号, n行動１, 90))
			{
				return n行動１;
			}
		}
		nターゲット = 敵ターゲット_回復選択(n行動１, 25);
		if (nターゲット > 0)
		{
			if (合戦敵_行動チェック(n武将番号, n行動１, 60))
			{
				return n行動１;
			}
		}
	}
	if (n行動１ == 84 && キャラ_ダメージ率(0, n武将番号) >= 50)
	{
		if (合戦敵_行動チェック(n武将番号, n行動１, 70))
		{
			敵ターゲット_設定(n行動１, n武将番号);
			return n行動１;
		}
	}
	if (n兵種 == 7)
	{
		if (n行動１ == 58 || n行動１ == 126)
		{
			if (キャラ_ダメージ率(0, n武将番号) >= 50)
			{
				if (合戦敵_行動チェック(n武将番号, n行動１, 80))
				{
					敵ターゲット_設定(n行動１, n武将番号);
					return n行動１;
				}
			}
		}
		if (n行動４ == 73)
		{
			if (合戦敵_ガードチェック())
			{
				if (合戦敵_行動チェック(n武将番号, n行動４, 70))
				{
					return n行動４;
				}
			}
		}
	}
	if (行動_状態付与(n行動１))
	{
		if (合戦敵_付与チェック() && n残りターン >= 10)
		{
			if (合戦敵_行動チェック(n武将番号, n行動１, 50))
			{
				敵ターゲット_選択(n武将番号, n行動１);
				return n行動１;
			}
		}
	}
	if (n行動１ == 66)
	{
		if (戦果取得(1) > 戦果取得(2) && n部隊数 >= 3)
		{
			if (合戦敵_行動チェック(n武将番号, n行動１, 90))
			{
				return n行動１;
			}
		}
	}
	if (n行動４ == 5 || n行動４ == 150)
	{
		if (戦果取得(1) < 戦果取得(2))
		{
			if (合戦敵_行動チェック(n武将番号, n行動４, 60))
			{
				return n行動４;
			}
		}
	}
	if (n行動１ == 3 || n行動１ == 143)
	{
		if (!合戦敵_防御式神チェック())
		{
			nターゲット = 敵ターゲット_防御式神選択(n行動１);
			if (nターゲット > 0)
			{
				if (合戦敵_行動チェック(n武将番号, n行動１, 50))
				{
					return n行動１;
				}
			}
		}
	}
	if (n行動４ == 85 || n行動４ == 86)
	{
		if (n部隊数 >= 3 && n残りターン >= 10)
		{
			nターゲット = 敵ターゲット_行動回数選択(n行動４);
			if (nターゲット > 0)
			{
				if (合戦敵_行動チェック(n武将番号, n行動４, 50))
				{
					return n行動４;
				}
			}
		}
	}
	if (n行動４ > 0 && 行動_タメ(n行動４) > 0)
	{
		if (n部隊数 >= 3 && n残りターン >= 15)
		{
			if (合戦敵_行動チェック(n武将番号, n行動４, 80))
			{
				敵ターゲット_選択(n武将番号, n行動４);
				return n行動４;
			}
		}
	}
	if (n行動３ > 0 && 行動_タメ(n行動３) > 0)
	{
		if (n部隊数 >= 3 && n残りターン >= 15 && !合戦敵_兵種チェック(6, 3))
		{
			if (合戦敵_行動チェック(n武将番号, n行動３, 80))
			{
				敵ターゲット_選択(n武将番号, n行動３);
				return n行動３;
			}
		}
	}
	if (n行動４ > 0 && 行動_ＴＸ(n行動４) == 0)
	{
		if (n行動４ == 139)
		{
			敵ターゲット_優先登録(3);
		}
		if (n行動４ == 140)
		{
			敵ターゲット_優先登録(6);
		}
		if (合戦敵_行動チェック(n武将番号, n行動４, 40))
		{
			敵ターゲット_選択(n武将番号, n行動４);
			return n行動４;
		}
	}
	if (n行動１ > 0 && 行動_ＴＸ(n行動１) == 0)
	{
		if (合戦敵_行動チェック(n武将番号, n行動１, 20))
		{
			敵ターゲット_選択(n武将番号, n行動１);
			return n行動１;
		}
	}
	if (n行動３ > 0 && 行動_ＴＸ(n行動３) == 0)
	{
		switch (n兵種)
		{
			case 1:
			case 4:
			case 5:
			case 6:
				敵ターゲット_除外登録(3);
				break;
			default:
				break;
		}
		if (合戦敵_行動チェック(n武将番号, n行動３, 100))
		{
			敵ターゲット_選択(n武将番号, n行動３);
			return n行動３;
		}
	}
	敵ターゲット_設定(1, 0);
	return 1;
}

bool 合戦敵_行動チェック(int n武将番号, int n行動, int n確率)
{
	if (n行動 <= 0)
	{
		return false;
	}
	if (◆戦闘時間制限 == 1)
	{
		goto label0;
	}
	int cnt1 = キャラ_現在技数(0, n武将番号);
	if (cnt1 <= 0)
	{
		return false;
	}
	if (!行動_必殺技(n行動))
	{
		int cnt2 = 行動_技数(n行動);
		if (cnt2 < 0)
		{
			return false;
		}
		if (cnt1 < cnt2)
		{
			return false;
		}
	}
label0:
	bool bMae = 戦闘_敵前衛(n武将番号);
	int nType = 行動_ターゲット(n行動);
	if (!bMae)
	{
		if (nType == 1 || nType == 6)
		{
			return false;
		}
	}
	int i = 0;
	int cnt = 0;
	if (n行動 == 21 || n行動 == 22)
	{
		cnt = 0;
		for (i = 21; i <= 26; ++i)
		{
			if (i == n武将番号)
			{
				continue;
			}
			if (合戦_壊滅状態(i))
			{
				continue;
			}
			if (bMae)
			{
				if (戦闘_敵前衛(i))
				{
					++cnt;
				}
			}
			else if (戦闘_敵後衛(i))
			{
				++cnt;
			}
		}
		if (cnt <= 0)
		{
			return false;
		}
	}
	if (n行動 == 23)
	{
		cnt = 0;
		for (i = 21; i <= 26; ++i)
		{
			if (i == n武将番号)
			{
				continue;
			}
			if (合戦_壊滅状態(i))
			{
				continue;
			}
			++cnt;
		}
		if (cnt <= 0)
		{
			return false;
		}
	}
	if (確率チェック(n確率))
	{
		return true;
	}
	return false;
}

bool 合戦敵_兵種チェック(int n兵種, int nMode)
{
	int i = 0;
	if (nMode == 1 || nMode == 2 || nMode == 3)
	{
		for (i = 11; i <= 16; ++i)
		{
			if (合戦_壊滅状態(i))
			{
				continue;
			}
			if (nMode == 1 && !戦闘_味方前衛(i))
			{
				continue;
			}
			if (nMode == 2 && !戦闘_味方後衛(i))
			{
				continue;
			}
			if (キャラ_兵種(0, i) == n兵種)
			{
				return true;
			}
		}
		return false;
	}
	if (nMode == 4 || nMode == 5 || nMode == 6)
	{
		for (i = 21; i <= 26; ++i)
		{
			if (合戦_壊滅状態(i))
			{
				continue;
			}
			if (nMode == 4 && !戦闘_敵前衛(i))
			{
				continue;
			}
			if (nMode == 5 && !戦闘_敵後衛(i))
			{
				continue;
			}
			if (キャラ_兵種(0, i) == n兵種)
			{
				return true;
			}
		}
		return false;
	}
	return false;
}

bool 合戦敵_兵種チェック２(int n兵種, int nMode)
{
	int i = 0;
	if (nMode == 1 || nMode == 2 || nMode == 3)
	{
		for (i = 11; i <= 16; ++i)
		{
			if (合戦_壊滅状態(i))
			{
				continue;
			}
			if (nMode == 1 && !戦闘_味方前衛(i))
			{
				continue;
			}
			if (nMode == 2 && !戦闘_味方後衛(i))
			{
				continue;
			}
			if (キャラ_兵種(0, i) != n兵種)
			{
				return true;
			}
		}
		return false;
	}
	if (nMode == 4 || nMode == 5 || nMode == 6)
	{
		for (i = 21; i <= 26; ++i)
		{
			if (合戦_壊滅状態(i))
			{
				continue;
			}
			if (nMode == 4 && !戦闘_敵前衛(i))
			{
				continue;
			}
			if (nMode == 5 && !戦闘_敵後衛(i))
			{
				continue;
			}
			if (キャラ_兵種(0, i) != n兵種)
			{
				return true;
			}
		}
		return false;
	}
	return false;
}

bool 合戦敵_付与チェック()
{
	int i;
	for (i = 21; i <= 26; ++i)
	{
		if (合戦_壊滅状態(i))
		{
			continue;
		}
		if (キャラ_攻撃付与(0, i) == 0)
		{
			return true;
		}
		if (キャラ_防御付与(0, i) == 0)
		{
			return true;
		}
		if (キャラ_知力付与(0, i) == 0)
		{
			return true;
		}
		if (キャラ_早さ付与(0, i) == 0)
		{
			return true;
		}
	}
	return false;
}

int 合戦敵_付与数()
{
	int i = 0;
	int cnt = 0;
	cnt = 0;
	for (i = 11; i <= 16; ++i)
	{
		if (合戦_壊滅状態(i))
		{
			continue;
		}
		if (キャラ_攻撃付与(0, i) > 0)
		{
			++cnt;
		}
		if (キャラ_防御付与(0, i) > 0)
		{
			++cnt;
		}
		if (キャラ_知力付与(0, i) > 0)
		{
			++cnt;
		}
		if (キャラ_早さ付与(0, i) > 0)
		{
			++cnt;
		}
	}
	return cnt;
}

bool 合戦敵_ガードチェック()
{
	int i;
	for (i = 11; i <= 16; ++i)
	{
		if (合戦_味方ガード状態(i) > 0)
		{
			return true;
		}
	}
	return false;
}

bool 合戦敵_防御式神チェック()
{
	int i;
	for (i = 11; i <= 16; ++i)
	{
		if (合戦_壊滅状態(i))
		{
			continue;
		}
		if (キャラ_Ｆ式神(0, i) == 1)
		{
			return true;
		}
	}
	return false;
}

int 合戦敵_ターゲット選択(int n武将番号, int n行動, ref array@int anArray)
{
	int i = 0;
	int nNo = 0;
	int nRet = 0;
	int nType = 行動_ターゲット(n行動);
	int nターゲット = 敵ターゲット_取得(n武将番号);
	if (!anArray.Empty())
	{
		anArray.Free();
	}
	if (nType == 1 || nType == 2)
	{
		戦闘_ターゲット表示(nターゲット);
		nRet = 合戦_味方ガード取得(nターゲット);
		if (nRet > 0)
		{
			LOG_BATTLE("\n★　味方ガード発動　［" + キャラ_名前(0, nターゲット) + "］");
			戦闘ユニット_交代(2, nRet, 250);
			anArray.PushBack(nRet);
			goto label0;
		}
		anArray.PushBack(nターゲット);
		goto label0;
	}
	if (nType == 3 || nType == 4)
	{
		戦闘_ターゲット表示(nターゲット);
		anArray.PushBack(nターゲット);
		goto label0;
	}
	if (nType == 5 || nType == 6)
	{
		return 戦闘_味方列(nターゲット, anArray);
	}
	if (nType == 7)
	{
		return 戦闘_味方全体(anArray);
	}
	if (nType == 8)
	{
		return 戦闘_敵全体(anArray);
	}
label0:
	return anArray.Numof();
}

int 合戦敵_味方ガード取得(int nターゲット)
{
	int i = 0;
	int フラグ = 戦闘_敵前衛(nターゲット) ? 1 : 2;
	for (i = 21; i <= 26; ++i)
	{
		if (i == nターゲット)
		{
			continue;
		}
		if (合戦敵_味方ガード発生(フラグ, i))
		{
			return i;
		}
	}
	return 0;
}

bool 合戦敵_味方ガード発生(int フラグ, int n武将番号)
{
	switch (合戦_味方ガード状態(n武将番号))
	{
		case 1:
			if (フラグ == 1 && !戦闘_敵前衛(n武将番号))
			{
				return false;
			}
			if (フラグ == 2 && !戦闘_敵後衛(n武将番号))
			{
				return false;
			}
			break;
		case 2:
			break;
		default:
			return false;
	}
	int FFE = キャラ_ＦＦＥ(0, n武将番号);
	int nRand = 乱数(100);
	if (nRand <= FFE)
	{
		return true;
	}
	return false;
}

