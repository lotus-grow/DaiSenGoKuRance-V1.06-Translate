tagBushoManager::tagBushoManager()
{
	this.m_sSequence.create(30);
	this.m_nSortKey = 0;
}

tagBushoManager::~tagBushoManager()
{
	this.delete();
}

bool tagBushoManager::create(int nType, int nSeiryokuNo, int nZ)
{
	this.delete();
	if (nSeiryokuNo == 変数_味方勢力())
	{
		if (nType > 0)
		{
			this.createBusho2(nSeiryokuNo, nZ);
		}
		else
		{
			this.createBusho(nSeiryokuNo, nZ);
		}
		return true;
	}
	if (nSeiryokuNo == 20)
	{
		this.createHoryo(nSeiryokuNo, nZ);
		return true;
	}
	return false;
}

void tagBushoManager::delete()
{
	int i;
	for (i = 0; i < 30; ++i)
	{
		this.m_asBusho[i].delete();
	}
	this.m_sSequence.clear(1);
}

void tagBushoManager::update(int nBushoNo, bool bAnime)
{
	if (nBushoNo == 0)
	{
		return;
	}
	if (nBushoNo > 0)
	{
		int idx = this.search(nBushoNo);
		if (idx < 0)
		{
			return;
		}
		this.m_asBusho[idx].update(bAnime);
		return;
	}
	int i = 0;
	if (!bAnime)
	{
		for (i = 0; i < 30; ++i)
		{
			this.m_asBusho[i].update(false);
		}
		return;
	}
	int nTime = 0;
	sact_timer_t sTimer;
	for (i = 0; i < 30; ++i)
	{
		this.m_asBusho[i].animeStart(200);
	}
	効果音(105, false);
	sTimer.Set(0);
	while (nTime < 200)
	{
		for (i = 0; i < 30; ++i)
		{
			this.m_asBusho[i].anime(nTime);
		}
		UPDATE();
		nTime = sTimer.Get();
	}
	for (i = 0; i < 30; ++i)
	{
		this.m_asBusho[i].animeEnd();
	}
	UPDATE();
}

void tagBushoManager::save()
{
	int i = 0;
	int idx = 0;
	if (!確認("武将を表示する順番を保存しますか？", "", "", 1, "は　い", "いいえ"))
	{
		return;
	}
	this.reset();
	セーブデータ_武将クリア();
	for (i = 0; i < 30; ++i)
	{
		idx = this.m_sSequence.get(i);
		if (idx >= 0)
		{
			セーブデータ_武将設定(i, this.m_asBusho[idx].getBushoNo());
		}
	}
}

void tagBushoManager::arrange(int nIndex1, int nIndex2)
{
	this.m_sSequence.change(nIndex1, nIndex2);
}

void tagBushoManager::squeeze(int nSeq1, int nSeq2)
{
	int idx = this.m_sSequence.get(nSeq1 - 1);
	if (idx < 0)
	{
		return;
	}
	this.m_sSequence.del(idx);
	if (nSeq1 < nSeq2)
	{
		--nSeq2;
	}
	this.m_sSequence.ins(nSeq2 - 1, idx);
}

bool tagBushoManager::release(int nBushoNo, bool bHoryo)
{
	int idx = this.search(nBushoNo);
	if (idx < 0)
	{
		return false;
	}
	ref tagBusho rfBusho = this.m_asBusho[idx];
	int nSeiryokuNo = rfBusho.getSeiryokuNo();
	if (!bHoryo)
	{
		セーブデータ_武将削除(nBushoNo);
	}
	ＡＣ(キャラ_番号(nSeiryokuNo, nBushoNo), 99);
	キャラ消去(nBushoNo, nSeiryokuNo);
	rfBusho.delete();
	if (bHoryo)
	{
		this.m_sSequence.del(idx);
		this.m_sSequence.add(idx);
	}
	this.setPos();
	int i;
	for (i = 0; i < 30; ++i)
	{
		this.m_asBusho[i].resetBushoNo();
	}
	return true;
}

void tagBushoManager::sort(int nSkillNo)
{
	if (nSkillNo <= 0)
	{
		return;
	}
	if (this.m_nSortKey > 0 && this.m_nSortKey == nSkillNo)
	{
		return;
	}
	this.m_nSortKey = nSkillNo;
	int i = 0;
	int j = 0;
	int idx = 0;
	int idx2 = 0;
	bool bFlag = false;
	this.m_sSequence.backup(false);
	for (i = 0; i < 30; ++i)
	{
		idx = this.m_sSequence.get(i);
		for (j = i + 1; j < 30; ++j)
		{
			idx2 = this.m_sSequence.get(j);
			if (this.comp(idx, idx2))
			{
				this.m_sSequence.change(idx, idx2);
				idx = idx2;
				bFlag = true;
			}
		}
	}
	if (bFlag)
	{
		this.setPos();
	}
}

void tagBushoManager::reset()
{
	if (this.m_nSortKey > 0)
	{
		this.m_sSequence.restore(false);
		this.setPos();
	}
	this.m_nSortKey = 0;
}

int tagBushoManager::checkMouse(bool bCheckFlag)
{
	int i;
	for (i = 0; i < 30; ++i)
	{
		if (this.m_asBusho[i].checkMouse(bCheckFlag))
		{
			return i;
		}
	}
	return -1;
}

void tagBushoManager::setShow(bool bShow)
{
	int i;
	for (i = 0; i < 30; ++i)
	{
		this.m_asBusho[i].setShow(bShow);
	}
}

void tagBushoManager::setPos()
{
	int i = 0;
	int idx = 0;
	for (i = 0; i < 30; ++i)
	{
		idx = this.m_sSequence.get(i);
		if (idx >= 0)
		{
			this.m_asBusho[idx].setPos(this.getBushoX(i), this.getBushoY(i));
		}
	}
}

void tagBushoManager::setStatus(int nBushoNo, int nStatus)
{
	int idx = this.search(nBushoNo);
	if (idx < 0)
	{
		return;
	}
	if (this.m_asBusho[idx].isActive())
	{
		this.m_asBusho[idx].setStatus(nStatus);
	}
}

int tagBushoManager::getCount()
{
	int i = 0;
	int cnt = 0;
	for (i = 0; i < 30; ++i)
	{
		if (this.m_asBusho[i].getBushoNo() > 0)
		{
			++cnt;
		}
	}
	return cnt;
}

int tagBushoManager::getSequence(int nIndex)
{
	int i;
	for (i = 0; i < 30; ++i)
	{
		if (this.m_sSequence.get(i) == nIndex)
		{
			return i + 1;
		}
	}
	return 0;
}

int tagBushoManager::getSortKey()
{
	return this.m_nSortKey;
}

ref tagBusho tagBushoManager::getFromBushoNo(int nBushoNo)
{
	return this.get(this.search(nBushoNo));
}

ref tagBusho tagBushoManager::getFromSeq(int nSeq)
{
	return this.get(this.m_sSequence.get(nSeq - 1));
}

ref tagBusho tagBushoManager::get(int nIndex)
{
	if (nIndex < 0 || nIndex >= 30)
	{
		return NULL;
	}
	return this.m_asBusho[nIndex];
}

void tagBushoManager::createBusho(int nSeiryokuNo, int nZ)
{
	int i = 0;
	int nBushoNo = 0;
	ref tagBusho rfBusho;
	セーブデータ_武将登録();
	for (i = 0; i < 30; ++i)
	{
		rfBusho <- this.m_asBusho[i];
		nBushoNo = セーブデータ_武将番号(i);
		if (rfBusho.create(nSeiryokuNo, nBushoNo))
		{
			rfBusho.setPos(this.getBushoX(i), this.getBushoY(i));
			if (キャラ_行動(nSeiryokuNo, nBushoNo) > 0)
			{
				rfBusho.setStatus(2);
			}
		}
		else
		{
			rfBusho.setRect(this.getBushoX(i), this.getBushoY(i));
		}
		rfBusho.setZ(nZ);
		this.m_sSequence.add(i);
	}
	this.m_nSortKey = 0;
}

void tagBushoManager::createBusho2(int nSeiryokuNo, int nZ)
{
	int i = 0;
	int nBushoNo = 0;
	ref tagBusho rfBusho;
	セーブデータ_武将登録();
	for (i = 0; i < 30; ++i)
	{
		rfBusho <- this.m_asBusho[i];
		nBushoNo = セーブデータ_武将番号(i);
		if (rfBusho.create2(nSeiryokuNo, nBushoNo))
		{
			rfBusho.setPos(this.getBushoX(i), this.getBushoY(i));
			if (迷宮探索() && キャラ_迷宮技数(nSeiryokuNo, nBushoNo) <= 0)
			{
				rfBusho.setStatus(2);
			}
		}
		rfBusho.setZ(nZ);
		this.m_sSequence.add(i);
	}
	int nOldKey = this.m_nSortKey;
	this.m_nSortKey = 0;
	if (g_sBusho.getType() == 13)
	{
		this.sort(nOldKey);
	}
}

void tagBushoManager::createHoryo(int nSeiryokuNo, int nZ)
{
	int i = 0;
	int idx = 0;
	int nBushoNo = 0;
	ref tagBusho rfBusho;
	idx = 0;
	for (i = 1; i < 61; ++i)
	{
		if (idx >= 30)
		{
			break;
		}
		rfBusho <- this.m_asBusho[idx];
		if (rfBusho.create(nSeiryokuNo, i))
		{
			rfBusho.setPos(this.getBushoX(idx), this.getBushoY(idx));
			this.m_sSequence.add(idx);
			++idx;
		}
		rfBusho.setZ(nZ);
	}
	this.m_nSortKey = 0;
}

bool tagBushoManager::comp(int nIndex, int nIndex2)
{
	if (nIndex < 0 || nIndex >= 30)
	{
		return false;
	}
	if (nIndex2 < 0 || nIndex2 >= 30)
	{
		return false;
	}
	bool bRet1 = false;
	bool bRet2 = false;
	sキャラ sData1;
	sキャラ sData2;
	bRet1 = キャラ_取得(this.m_asBusho[nIndex].getSeiryokuNo(), this.m_asBusho[nIndex].getBushoNo(), sData1);
	bRet2 = キャラ_取得(this.m_asBusho[nIndex2].getSeiryokuNo(), this.m_asBusho[nIndex2].getBushoNo(), sData2);
	if (!bRet1)
	{
		return bRet2;
	}
	if (!bRet2)
	{
		return false;
	}
	if (this.m_nSortKey == 9)
	{
		return sData1.兵数 < sData2.兵数;
	}
	if (this.m_nSortKey == 1)
	{
		return sData1.探索 < sData2.探索;
	}
	if (this.m_nSortKey == 2)
	{
		return sData1.交渉 < sData2.交渉;
	}
	if (this.m_nSortKey == 3)
	{
		return sData1.建設 < sData2.建設;
	}
	if (this.m_nSortKey == 99)
	{
		return sData1.Ｓレベル < sData2.Ｓレベル;
	}
	return false;
}

int tagBushoManager::getBushoX(int nIndex)
{
	if (g_sBusho.getType() == 13)
	{
		return 482;
	}
	return 382;
}

int tagBushoManager::getBushoY(int nIndex)
{
	return 110 + 15 * nIndex;
}

int tagBushoManager::search(int nBushoNo)
{
	if (nBushoNo <= 0)
	{
		return -1;
	}
	int i;
	for (i = 0; i < 30; ++i)
	{
		if (this.m_asBusho[i].getBushoNo() == nBushoNo)
		{
			return i;
		}
	}
	return -1;
}

int getBushoParamNo(int nSkillNo)
{
	if (nSkillNo == 1)
	{
		return 6;
	}
	if (nSkillNo == 2)
	{
		return 7;
	}
	if (nSkillNo == 3)
	{
		return 8;
	}
	if (nSkillNo == 9)
	{
		return 11;
	}
	return 0;
}

int getBushoParamX(int nParamNo)
{
	if (nParamNo < 1 || nParamNo > 12)
	{
		return 0;
	}
	if (nParamNo == 11)
	{
		return 153;
	}
	if (nParamNo == 12)
	{
		return 90;
	}
	return 230 + (nParamNo - 1) * 21;
}

int getBushoParamWidth(int nParamNo)
{
	if (nParamNo < 1 || nParamNo > 12)
	{
		return 0;
	}
	if (nParamNo == 11)
	{
		return 69;
	}
	if (nParamNo == 12)
	{
		return 55;
	}
	return 13;
}

int getIconNo(int nType)
{
	switch (nType)
	{
		case 1:
			return 10161;
		case 2:
			return 10160;
		case 3:
			return 10162;
		case 4:
			return 10164;
		case 5:
			return 10163;
		case 6:
			return 10165;
		case 7:
			return 10167;
		case 8:
			return 10168;
		case 9:
			return 10166;
		case 10:
			return 10170;
		case 11:
			return 10179;
		case 12:
			return 10178;
		case 13:
			return 10169;
		case 20:
			break;
		case 23:
		case 26:
		case 27:
		case 28:
		case 29:
		case 31:
		case 32:
		case 33:
			return 10158;
		case 24:
			return 10159;
		case 25:
		case 34:
			return 10170;
		case 60:
			return 10170;
		case 62:
			return 5657;
		case 63:
			return 5803;
		case 64:
			return 5802;
		case 65:
			return 5804;
		case 66:
			return 5806;
		case 67:
			return 5810;
		case 68:
			return 5808;
		case 69:
			return 5813;
		case 70:
			return 5811;
		case 71:
			return 5801;
		case 72:
			return 5805;
		case 73:
			return 5657;
		case 91:
			return 10158;
		case 92:
			return 10158;
		case 75:
			return 6612;
		case 97:
			return 6612;
		case 100:
			return 6612;
		case 102:
			return 10162;
		case 103:
			return 10162;
		default:
			break;
	}
	return 0;
}

bool 迷宮探索()
{
	return g_sMapControl.getParam(1) == 5;
}

