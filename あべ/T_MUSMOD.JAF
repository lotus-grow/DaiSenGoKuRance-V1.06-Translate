void scrollMusicMode(int nValue)
{
	g_sMusicMode.setDataPos(nValue);
}

void wheelMusicMode(int nWheel)
{
	g_sMusicMode.setWheel(nWheel);
}

tagMusicMode::tagMusicMode()
{
	this.m_nCurrentNo = 0;
	this.m_bMusicFlag = false;
}

tagMusicMode::~tagMusicMode()
{
	this.delete();
}

bool tagMusicMode::run()
{
	if (◆予備０８ == 1)
	{
		if (ＧＦ[367] > 0)
		{
			システム神／２部音楽モード不在();
			return false;
		}
		if (ＧＦ[355] == 0)
		{
			システム神／２部音楽モード初回();
			ＧＦ[355] = 1;
			return false;
		}
		if (ＧＦ[355] == 1)
		{
			システム神／２部音楽モード汎用();
			return false;
		}
		return false;
	}
	int nEnable = msgSkipStop(0);
	int nID = 0;
	int nMusicNo = 曲番号();
	音楽(0, 0, false);
	システムバー_無効設定(false, true, true, true);
	ショートカット_表示設定(false);
	this.create();
	EFFECT(1, 100, 0);
	while (true)
	{
		nID = this.checkSelect();
		if (this.exec(nID))
		{
			break;
		}
	}
	this.delete();
	システムバー_有効設定(false, true, true, true);
	ショートカット_表示設定(true);
	音楽(nMusicNo, 0, false);
	msgSkipSetEnable(nEnable);
	return nID != 90001;
}

void tagMusicMode::update()
{
	this.m_sBar.anime();
}

void tagMusicMode::setDataPos(int nIndex)
{
	int i = 0;
	int cnt = this.m_asData.Numof();
	int idx = 0;
	ref tagMusicModeData rfData;
	if (nIndex < 0)
	{
		nIndex = 0;
	}
	if (nIndex >= cnt)
	{
		nIndex = cnt - 1;
	}
	for (i = 0; i < cnt; ++i)
	{
		rfData <- this.m_asData[i];
		rfData.setShow(false);
		rfData.setStatus(0);
	}
	rfData <- this.m_asData[nIndex];
	rfData.setPos(298, 271);
	rfData.setStatus(1);
	rfData.setShow(true);
	idx = nIndex - 1;
	for (i = 1; i <= 4; ++i)
	{
		if (idx < 0)
		{
			break;
		}
		rfData <- this.m_asData[idx--];
		rfData.setPos(298, 271 - 34 * i);
		rfData.setShow(true);
	}
	idx = nIndex + 1;
	for (i = 1; i <= 4; ++i)
	{
		if (idx >= cnt)
		{
			break;
		}
		rfData <- this.m_asData[idx++];
		rfData.setPos(298, 271 + 34 * i);
		rfData.setShow(true);
	}
	if (this.m_nCurrentNo > 0)
	{
		this.playMusic(this.getDataNo());
	}
}

void tagMusicMode::setWheel(int nWheel)
{
	int nNo1 = this.m_sButton.getButtonNo(1003);
	int nNo2 = this.m_sButton.getButtonNo(1004);
	if (nWheel == 9991)
	{
		this.m_sButton.setButtonSelect(nNo1, true);
		this.m_sButton.setButtonClick(nNo1, true);
	}
	else
	{
		this.m_sButton.setButtonSelect(nNo1, false);
	}
	if (nWheel == 9992)
	{
		this.m_sButton.setButtonSelect(nNo2, true);
		this.m_sButton.setButtonClick(nNo2, true);
	}
	else
	{
		this.m_sButton.setButtonSelect(nNo2, false);
	}
}

bool tagMusicMode::getMusicFlag()
{
	return this.m_bMusicFlag;
}

void tagMusicMode::create()
{
	this.delete();
	画面_クリア();
	if (!this.m_asData.Empty())
	{
		this.m_asData.Free();
	}
	int cnt = 音楽データ_数();
	int cnt2 = 音楽データ_有効数();
	this.m_spBase.setCG(10711);
	this.m_spBase.setPos(0, 0);
	this.m_spBase.setZ(201);
	this.m_spBase.setShow(1);
	this.m_spCover.setCG(10712);
	this.m_spCover.setPos(83, 135);
	this.m_spCover.setZ(211);
	this.m_spCover.setShow(1);
	this.m_sTitle.create(5, 1, 0, 0);
	this.m_sTitle.setPos(101, 10);
	this.m_sTitle.setZ(202);
	this.m_sTitle.setFontSize(20);
	this.m_sTitle.setFontFace(0);
	this.m_sTitle.setFontBold(false);
	this.m_sTitle.setFontColor(255, 255, 255);
	this.m_sTitle.setShadowPixel(0, 0, 0, 0);
	this.m_sTitle.setShadowColor(128, 128, 128);
	this.m_sTitle.setText("音楽モード");
	this.m_sTitle.setShow(true);
	this.m_sBar.create(202);
	this.m_sScroll.create(202, 271, true);
	this.m_sScroll.setPos(699, 132);
	this.m_sScroll.setActive(-1, true);
	this.m_sScroll.setValue(0, cnt2, 1);
	this.m_sScroll.setCallback(&scrollMusicMode);
	this.m_sScroll.setCallbackWheel(&wheelMusicMode);
	this.m_sScroll.setShow(true);
	this.m_sButton.create(202, -1, -1);
	this.createButton(10714, 310, 451, 1001);
	this.createButton(10715, 451, 451, 1002);
	this.createButton(10716, 535, 451, 1003);
	this.createButton(10717, 619, 451, 1004);
	this.createButton(10082, 689, 82, 1099);
	this.m_sButton.setShow(true);
	if (cnt <= 0)
	{
		return;
	}
	int i = 0;
	int idx = 0;
	ref tagMusicModeData rfData;
	this.m_sList.create(221, -1, -1);
	this.m_asData.Alloc(cnt2);
	for (i = 0; i < cnt; ++i)
	{
		int nNo = i + 1;
		bool bActive = 音楽データ_有効(nNo);
		if (bActive)
		{
			rfData <- this.m_asData[idx];
			rfData.create(nNo);
			rfData.setZ(202);
			++idx;
		}
		this.createList(nNo, 97, 40 + 12 * i, bActive);
	}
	this.m_sList.setShow(true);
	this.setDataPos(0);
	this.m_bMusicFlag = true;
}

void tagMusicMode::createButton(int nCgNo, int nX, int nY, int nID)
{
	int nNo = 0;
	array@tagSprite aspWork[5];
	createButtonFromCg(nCgNo, 3, aspWork);
	nNo = this.m_sButton.addButtonSp(aspWork[0], aspWork[1], aspWork[2], aspWork[3], aspWork[4]);
	this.m_sButton.setButtonPos(nNo, nX, nY);
	this.m_sButton.setButtonActive(nNo, true);
	this.m_sButton.setButtonID(nNo, nID);
}

void tagMusicMode::createList(int nNo, int nX, int nY, bool bActive)
{
	tagMusicData sData;
	if (!音楽データ_取得(nNo, sData))
	{
		return;
	}
	int nNo2 = 0;
	tagSprite spWork1;
	tagSprite spWork2;
	tagSprite spWork3;
	sact_text_metrics_t tmTitle;
	tmTitle.nSize = 12;
	tmTitle.nColorR = 0;
	tmTitle.nColorG = 29;
	tmTitle.nColorB = 96;
	tmTitle.nWeight = 1400;
	tmTitle.nFace = 0;
	spWork1.create(196, 12, 0, 0, 0, 0);
	spWork1.textDrawCenter(sData.m_szTitle, tmTitle);
	spWork2.create(196, 12, 0, 0, 0, 0);
	drawGraph_Fill(spWork2, 0, 0, 196, 11, 171, 0, 66);
	drawGraph_FillAMap(spWork2, 0, 0, 196, 11, 255);
	tmTitle.nColorR = 255;
	tmTitle.nColorG = 255;
	tmTitle.nColorB = 255;
	spWork2.textDrawCenter(sData.m_szTitle, tmTitle);
	spWork3.create(196, 12, 0, 0, 0, 0);
	tmTitle.nColorR = 150;
	tmTitle.nColorG = 112;
	tmTitle.nColorB = 95;
	spWork3.textDrawCenter("？　？　？", tmTitle);
	nNo2 = this.m_sList.addButtonSp(spWork1, spWork2, spWork3, NULL, NULL);
	this.m_sList.setButtonPos(nNo2, nX, nY);
	this.m_sList.setButtonID(nNo2, nNo);
	this.m_sList.setButtonActive(nNo2, bActive);
}

void tagMusicMode::delete()
{
	int i = 0;
	int cnt = this.m_asData.Numof();
	this.stopMusic();
	for (i = 0; i < cnt; ++i)
	{
		this.m_asData[i].delete();
	}
	this.m_spBase.delete();
	this.m_spCover.delete();
	this.m_sTitle.delete();
	this.m_sBar.delete();
	this.m_sScroll.delete();
	this.m_sButton.delete();
	this.m_sList.delete();
	this.m_nCurrentNo = 0;
	this.m_bMusicFlag = false;
}

bool tagMusicMode::exec(int nID)
{
	if (nID == 90001)
	{
		return true;
	}
	if (nID == 1099)
	{
		return true;
	}
	if (nID > 1100)
	{
		this.m_sScroll.exec(nID - 1100);
		return false;
	}
	if (nID == 1001)
	{
		this.execPlay();
		return false;
	}
	if (nID == 1002)
	{
		this.execStop();
		return false;
	}
	if (nID == 1003)
	{
		this.execBefore();
		return false;
	}
	if (nID == 1004)
	{
		this.execNext();
		return false;
	}
	if (nID > 0)
	{
		this.execList(nID);
		return false;
	}
	return false;
}

void tagMusicMode::execPlay()
{
	int nNo = this.getDataNo();
	if (nNo > 0 && nNo == this.m_nCurrentNo)
	{
		return;
	}
	this.playMusic(nNo);
	UPDATE();
}

void tagMusicMode::execStop()
{
	this.stopMusic();
	UPDATE();
}

void tagMusicMode::execBefore()
{
	this.setScrollPos(this.m_sScroll.getValue() - 1);
	UPDATE();
}

void tagMusicMode::execNext()
{
	this.setScrollPos(this.m_sScroll.getValue() + 1);
	UPDATE();
}

void tagMusicMode::execList(int nID)
{
	if (!this.isActive(nID))
	{
		return;
	}
	int i = 0;
	int cnt = this.m_asData.Numof();
	int idx = -1;
	for (i = 0; i < cnt; ++i)
	{
		if (this.m_asData[i].getNo() == nID)
		{
			idx = i;
			break;
		}
	}
	if (idx < 0)
	{
		return;
	}
	this.setScrollPos(i);
	this.playMusic(nID);
	UPDATE();
}

void tagMusicMode::setScrollPos(int nIndex)
{
	nIndex = this.m_sScroll.setValue(nIndex, -1, -1);
	this.setDataPos(nIndex);
}

int tagMusicMode::checkSelect()
{
	int nID = 0;
	int nID2 = 0;
	this.resetSelect();
	nID2 = 0;
	while (true)
	{
		nID = this.checkKey();
		if (nID > 0)
		{
			break;
		}
		this.checkWheel();
		nID = this.checkMouse();
		if (nID != nID2)
		{
			this.setSelect(nID2, false);
			this.setSelect(nID, true);
			this.showComment(nID);
			nID2 = nID;
		}
		UPDATE();
		if (キー_決定())
		{
			if (this.checkClick(nID))
			{
				break;
			}
		}
	}
	return nID;
}

int tagMusicMode::checkMouse()
{
	int nNo = 0;
	int nID = 0;
	nID = g_sSystemBar.checkMouse();
	if (nID > 0)
	{
		return nID;
	}
	nNo = this.m_sButton.checkMouseRect(true, true);
	if (nNo > 0)
	{
		return this.m_sButton.getButtonID(nNo);
	}
	nID = this.m_sScroll.checkMouse();
	if (nID > 0)
	{
		return nID + 1100;
	}
	nNo = this.m_sList.checkMouseRect(true, true);
	if (nNo > 0)
	{
		return this.m_sList.getButtonID(nNo);
	}
	return 0;
}

bool tagMusicMode::checkClick(int nID)
{
	if (nID > 90000)
	{
		return g_sSystemBar.checkClick(nID);
	}
	if (nID > 1100)
	{
		return this.m_sScroll.checkClick(nID - 1100);
	}
	if (nID > 1000)
	{
		if (nID == 1001)
		{
			if (!this.isActive(this.getDataNo()))
			{
				goto label0;
			}
		}
		if (nID == 1002)
		{
			if (this.m_nCurrentNo <= 0)
			{
				goto label0;
			}
		}
		if (nID == 1003)
		{
			if (this.m_sScroll.getValue() <= 0)
			{
				goto label0;
			}
		}
		if (nID == 1004)
		{
			if (this.m_sScroll.getValue() >= this.m_asData.Numof() - 1)
			{
				goto label0;
			}
		}
		return this.m_sButton.checkClick(this.m_sButton.getButtonNo(nID));
	}
	if (nID > 0)
	{
		return this.m_sList.checkClick(this.m_sList.getButtonNo(nID));
	}
label0:
	playCancel();
	キー_離し待ち(0);
	return false;
}

void tagMusicMode::checkWheel()
{
	this.m_sScroll.checkWheel();
	this.setWheel(0);
}

int tagMusicMode::checkKey()
{
	int nID = 0;
	if (キー_キャンセル())
	{
		this.m_sButton.soundCancel();
		キー_離し待ち(0);
		return 1099;
	}
	nID = g_sSystemBar.checkKey();
	if (nID > 0)
	{
		return nID;
	}
	return 0;
}

void tagMusicMode::resetSelect()
{
	this.m_sScroll.resetSelect();
	this.m_sButton.resetSelect();
	this.m_sList.resetSelect();
	g_sSystemBar.resetSelect();
}

void tagMusicMode::setSelect(int nID, bool bSelect)
{
	if (nID > 90000)
	{
		g_sSystemBar.setSelect(nID, bSelect);
		return;
	}
	if (nID > 1100)
	{
		this.m_sScroll.setSelect(nID - 1100, bSelect);
		return;
	}
	if (nID > 1000)
	{
		this.m_sButton.setButtonSelect(this.m_sButton.getButtonNo(nID), bSelect);
		return;
	}
	if (nID > 0)
	{
		this.m_sList.setButtonSelect(this.m_sList.getButtonNo(nID), bSelect);
		return;
	}
}

void tagMusicMode::setCursor(int nID)
{
	if (nID > 90000)
	{
		g_sSystemBar.setCursor(nID);
		return;
	}
	if (nID > 1100)
	{
		this.m_sScroll.setCursor(nID - 1100);
		return;
	}
	if (nID > 1000)
	{
		this.m_sButton.setCursor(this.m_sButton.getButtonNo(nID));
		return;
	}
	if (nID > 0)
	{
		this.m_sList.setCursor(this.m_sList.getButtonNo(nID));
		return;
	}
}

void tagMusicMode::showComment(int nID)
{
	g_sSystemBar.showComment(0);
	if (nID > 90000)
	{
		g_sSystemBar.showComment(nID);
		return;
	}
	if (nID > 1100)
	{
		return;
	}
	if (nID > 1000)
	{
		return;
	}
	if (nID > 0)
	{
		return;
	}
}

bool tagMusicMode::isActive(int nNo)
{
	return this.m_sList.getButtonActive(this.m_sList.getButtonNo(nNo));
}

void tagMusicMode::playMusic(int nNo)
{
	if (this.m_nCurrentNo > 0 && nNo == this.m_nCurrentNo)
	{
		return;
	}
	int nMusicNo = this.getMusicNo(nNo);
	if (nMusicNo <= 0)
	{
		this.stopMusic();
		return;
	}
	g_sMusic.play(nMusicNo, 0, false);
	this.m_nCurrentNo = nNo;
	this.m_sBar.animeStart();
}

void tagMusicMode::stopMusic()
{
	if (this.m_nCurrentNo > 0)
	{
		g_sMusic.stop(0, false);
		this.m_sBar.animeEnd();
	}
	this.m_nCurrentNo = 0;
}

int tagMusicMode::getMusicNo(int nNo)
{
	tagMusicData sData;
	if (!音楽データ_取得(nNo, sData))
	{
		return 0;
	}
	if (!this.isActive(nNo))
	{
		return 0;
	}
	return sData.m_nMusicNo;
}

int tagMusicMode::getDataNo()
{
	int idx = this.m_sScroll.getValue();
	int cnt = this.m_asData.Numof();
	if (idx < 0 || idx >= cnt)
	{
		return 0;
	}
	return this.m_asData[idx].getNo();
}

