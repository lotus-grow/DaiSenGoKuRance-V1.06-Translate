tagSelectCg::tagSelectCg()
{
}

tagSelectCg::~tagSelectCg()
{
	this.delete();
}

void tagSelectCg::create()
{
	this.delete();
	int nW = 322;
	int nH = 32;
	ref tagSprite rfWork1;
	ref tagSprite rfWork2;
	array@tagSprite aspWork[3];
	createSpriteFromCg(10058, aspWork);
	rfWork1 <- this.m_aspCg[0];
	rfWork1.create(nW, nH, 0, 0, 0, 0);
	rfWork1.copyCg(3, 3, aspWork[0], 0, 0, 316, 26);
	rfWork2 <- this.m_aspCg[1];
	rfWork2.copy(rfWork1, false);
	rfWork2.blendColor(255, 255, 95, 102);
	rfWork1 <- this.m_aspCg[2];
	rfWork1.create(nW, nH, 0, 0, 0, 0);
	rfWork1.copyCg(3, 3, aspWork[1], 0, 0, 316, 26);
	rfWork2 <- this.m_aspCg[3];
	rfWork2.copy(rfWork1, false);
	rfWork2.blendColor(255, 255, 95, 102);
	rfWork1 <- this.m_aspCg[4];
	rfWork1.create(nW, nH, 0, 0, 0, 0);
	rfWork1.copyCg(3, 3, aspWork[2], 0, 0, 316, 26);
}

void tagSelectCg::delete()
{
	int i;
	for (i = 0; i < 5; ++i)
	{
		this.m_aspCg[i].delete();
	}
}

bool tagSelectCg::createSp(string szText, int nR, int nG, int nB, ref array@tagSprite aspButton)
{
	if (szText == "")
	{
		return false;
	}
	if (aspButton === NULL)
	{
		return false;
	}
	int i = 0;
	int cnt = aspButton.Numof();
	ref tagSprite rfButton;
	if (cnt > 5)
	{
		cnt = 5;
	}
	sact_text_metrics_t tmButton;
	normalizeRGB(nR, nG, nB);
	tmButton.nSize = 18;
	tmButton.nColorR = nR;
	tmButton.nColorG = nG;
	tmButton.nColorB = nB;
	tmButton.nWeight = 1400;
	tmButton.nFace = 0;
	for (i = 0; i < cnt; ++i)
	{
		rfButton <- aspButton[i];
		rfButton.copy(this.m_aspCg[i], false);
		rfButton.textDrawCenter(szText, tmButton);
	}
	return true;
}

bool tagSelectCg::createSpTitle(string szText, int nR, int nG, int nB, ref array@tagSprite aspButton)
{
	if (szText == "")
	{
		return false;
	}
	if (aspButton === NULL)
	{
		return false;
	}
	int i = 0;
	int cnt = aspButton.Numof();
	if (cnt > 5)
	{
		cnt = 5;
	}
	ref tagSprite rfButton;
	ref tagSprite rfCg;
	rfCg <- this.m_aspCg[0];
	rfButton <- aspButton[0];
	rfButton.copy(rfCg, false);
	rfButton <- aspButton[1];
	rfButton.copy(rfCg, false);
	rfCg <- this.m_aspCg[2];
	rfButton <- aspButton[2];
	rfButton.copy(rfCg, false);
	rfButton <- aspButton[3];
	rfButton.copy(rfCg, false);
	rfCg <- this.m_aspCg[4];
	rfButton <- aspButton[4];
	rfButton.copy(rfCg, false);
	sact_text_metrics_t tmButton;
	normalizeRGB(nR, nG, nB);
	tmButton.nSize = 18;
	tmButton.nColorR = nR;
	tmButton.nColorG = nG;
	tmButton.nColorB = nB;
	tmButton.nWeight = 1400;
	tmButton.nFace = 0;
	for (i = 0; i < cnt; ++i)
	{
		rfButton <- aspButton[i];
		rfButton.textDrawCenter(szText, tmButton);
	}
	return true;
}

tagSelectData::tagSelectData()
{
	this.m_nID = -1;
	this.m_szText = "";
	this.m_nR = 0;
	this.m_nG = 0;
	this.m_nB = 0;
}

void tagSelectData::setComment(string szComment, int nTextCount)
{
	array@string aszText;
	if (!this.m_aszComment.Empty())
	{
		this.m_aszComment.Free();
	}
	ÉeÉLÉXÉgï™äÑÇQ(szComment, nTextCount, aszText);
	int i = 0;
	int cnt = aszText.Numof();
	for (i = 0; i < cnt; ++i)
	{
		this.m_aszComment.PushBack(aszText[i]);
	}
}

tagSelect::tagSelect()
{
	this.setDefault();
	this.m_nCloseID = -1;
}

tagSelect::~tagSelect()
{
	this.delete();
}

int tagSelect::add(int nID, string szText, int nR, int nG, int nB)
{
	if (nR < 0)
	{
		nR = nID < 0 ? 175 : 0;
	}
	if (nG < 0)
	{
		nG = nID < 0 ? 123 : 0;
	}
	if (nB < 0)
	{
		nB = nID < 0 ? 100 : 0;
	}
	normalizeRGB(nR, nG, nB);
	tagSelectData sData;
	sData.m_nID = nID;
	sData.m_szText = szText;
	sData.m_nR = nR;
	sData.m_nG = nG;
	sData.m_nB = nB;
	int nNo = çsìÆ_î‘çÜ(szText);
	if (nNo > 0)
	{
		sData.setComment(çsìÆ_ê‡ñæ(nNo), 15);
	}
	this.m_asData.PushBack(sData);
	return this.m_asData.Numof();
}

void tagSelect::clear()
{
	if (!this.m_asData.Empty())
	{
		this.m_asData.Free();
	}
}

void tagSelect::setComment(int nID, string szComment)
{
	int idx = this.search(nID);
	if (idx < 0)
	{
		return;
	}
	this.m_asData[idx].setComment(szComment, 999);
}

int tagSelect::getCount()
{
	return this.m_asData.Numof();
}

int tagSelect::getCount2()
{
	int i = 0;
	int cnt = this.m_asData.Numof();
	int nCount = 0;
	for (i = 0; i < cnt; ++i)
	{
		if (this.m_asData[i].m_nID > 0)
		{
			++nCount;
		}
	}
	return nCount;
}

int tagSelect::open(bool bCancel, int nEffectNo, int nSpeed)
{
	int nRet = 0;
	int nID = 0;
	msgSkipStop(-1);
	if (this.getCount2() < 1)
	{
		goto label0;
	}
	this.create(bCancel ? 2147483647 : 0);
	this.setShow(true);
	EFFECT(nEffectNo, nSpeed, 0);
	nID = this.m_nCursorID;
	while (true)
	{
		nID = this.checkSelect(nID);
		if (nID == 2147483647)
		{
			if (bCancel)
			{
				break;
			}
			nID = this.m_nCursorID;
			continue;
		}
		if (nID > 0)
		{
			nRet = nID;
			break;
		}
		if (bCancel)
		{
			break;
		}
	}
	this.delete();
	EFFECT(nEffectNo, nSpeed, 0);
label0:
	this.clear();
	this.setDefault();
	this.showComment(0);
	return nRet;
}

void tagSelect::setPos(int nX, int nY)
{
	this.m_nX = nX;
	this.m_nY = nY;
}

void tagSelect::setCursorNo(int nID)
{
	this.m_nCursorID = nID;
}

void tagSelect::setShow(bool bShow)
{
	int i = 0;
	int cnt = this.m_aspSp.Numof();
	this.m_spBase.setShow(bShow);
	this.m_sTitle.setShow(bShow);
	this.m_sButton.setShow(bShow);
	for (i = 0; i < cnt; ++i)
	{
		this.m_aspSp[i].setShow(bShow);
	}
}

void tagSelect::create(int nCloseID)
{
	int i = 0;
	int cnt = this.m_asData.Numof();
	int nZ = Çyèáèòç≈ëÂ();
	int nH = 0;
	ref tagSelectData rfData;
	ref tagSelectData rfOld;
	this.delete();
	this.m_sButton.create(nZ + 1, -1, -1);
	rfOld <- NULL;
	for (i = 0; i < cnt; ++i)
	{
		rfData <- this.m_asData[i];
		if (rfData.m_nID > 0)
		{
			nH = this.createButton(nH, rfData, rfOld);
		}
		else if (rfData.m_nID == 0)
		{
			nH = this.createText(nH, rfData, rfOld);
		}
		else
		{
			nH = this.createSeparator(nH, rfData, rfOld);
		}
		rfOld <- rfData;
	}
	this.createBase(374, nH, nZ);
	int nX = this.m_spBase.getPosX();
	int nY = this.m_spBase.getPosY();
	this.setDataPos(nX, nY, nZ);
	this.m_sTitle.create(nX + 4, nY + 4, nZ + 1);
	int nNo = 0;
	array@tagSprite aspWork[5];
	createButtonFromCg(10082, 3, aspWork);
	nNo = this.m_sButton.addButtonSp(aspWork[0], aspWork[1], aspWork[2], aspWork[3], aspWork[4]);
	this.m_sButton.setButtonPos(nNo, nX + 340, nY + 6);
	if (nCloseID > 0)
	{
		this.m_sButton.setButtonActive(nNo, true);
		this.m_sButton.setButtonID(nNo, nCloseID);
	}
	else
	{
		this.m_sButton.setButtonActive(nNo, false);
	}
	this.m_nCloseID = nCloseID;
}

void tagSelect::delete()
{
	int i = 0;
	int cnt = this.m_aspSp.Numof();
	this.m_spBase.delete();
	this.m_sTitle.delete();
	this.m_sButton.delete();
	for (i = 0; i < cnt; ++i)
	{
		this.m_aspSp[i].delete();
	}
	this.m_nCloseID = -1;
}

int tagSelect::checkSelect(int nID)
{
	array@string tempwaza[5];
	array@string aszText[5];
	int nRet = 0;
	ÉLÅ[_ÉNÉäÉA(true);
	this.resetSelect();
	nID = this.setCursor(nID);
	this.setSelect(nID, true);
	this.showComment(nID);
	UPDATE();
	while (true)
	{
		if (ÉLÅ[_ÉLÉÉÉìÉZÉã())
		{
			this.m_sButton.soundCancel();
			ÉLÅ[_ó£Çµë“Çø(0);
			break;
		}
		nID = this.checkMouse(nID);
		if (nID > 0 && nID < 31 && ÇfÇe[412] > 0 && ÇfÇe[358] != nID)
		{
			lint ïêè´ëIëíÜ = ÇfÇe[239 + nID];
			g_sInfo.setGattai(ÇfÇe[412], ïêè´ëIëíÜ, 0, 0, 0, 0, 0);
		}
		lint ë∂ë±î‘çÜ = -1;
		lint ãzé˚î‘çÜ = -1;
		lint ÇfÇrî‘çÜ1 = -1;
		lint ÇfÇrî‘çÜ = -1;
		lint ï∫éÌa = -1;
		lint ãZa = -1;
		if (nID > 0 && nID < 31 && ÇfÇe[319] == 1 && ÇfÇe[358] != nID)
		{
			lint ë∂ë±î‘çÜëIëíÜ = ÇfÇe[239 + nID];
			g_sInfo.setGattai(1, ë∂ë±î‘çÜëIëíÜ, 0, 0, 0, 0, 0);
			ÇfÇrî‘çÜ = ÇfÇrî‘çÜéÊìæ(ë∂ë±î‘çÜëIëíÜ, 999);
			ï∫éÌa = gs[1][ÇfÇrî‘çÜ].ï∫éÌ;
			lint ï∫éÌÉOÉãÅ[Év = ïêè´ÉOÉãÅ[Év(ï∫éÌa);
			lint ï∫éÌëIëâÊëú = ï∫éÌÉOÉãÅ[Év + 5971;
			if (ï∫éÌëIëâÊëú > 5971 && ï∫éÌëIëâÊëú < 6000)
			{
				ëSïî(0, 0, ï∫éÌëIëâÊëú, 0, 0, "", 1, 0, 0);
			}
			else
			{
				ëSïî(0, 0, 65528, 0, 0, "", 1, 0, 0);
			}
			ÇfÇe[358] = nID;
		}
		if (nID > 0 && nID < 31 && ÇfÇe[319] == 2 && ÇfÇe[359] != nID)
		{
			ãzé˚î‘çÜ = ÇfÇe[239 + nID];
			ÇfÇrî‘çÜ = ÇfÇrî‘çÜéÊìæ(ãzé˚î‘çÜ, 999);
			tempwaza[0] = çsìÆ_ñºëO(gs[ÇfÇe[418]][ÇfÇrî‘çÜ].ãZÇP);
			tempwaza[1] = çsìÆ_ñºëO(gs[ÇfÇe[418]][ÇfÇrî‘çÜ].ãZÇQ);
			tempwaza[2] = çsìÆ_ñºëO(gs[ÇfÇe[418]][ÇfÇrî‘çÜ].ãZÇR);
			tempwaza[3] = çsìÆ_ñºëO(gs[ÇfÇe[418]][ÇfÇrî‘çÜ].ãZÇS);
			tempwaza[4] = çsìÆ_ñºëO(gs[ÇfÇe[418]][ÇfÇrî‘çÜ].ãZî\);
		}
		if (nID > 0 && nID < 31 && ÇfÇe[319] == 2)
		{
			lint i;
			for (i = 0; i < 5; i++)
			{
				if (tempwaza[i].Length() > 0)
				{
					aszText[i] = " [" + tempwaza[i] + "] ";
				}
				else
				{
					aszText[i] = " [" + "Å|Å|Å|" + "] ";
				}
			}
			g_sComment.show2(aszText);
		}
		else
		{
			g_sComment.hide();
		}
		if (nID > 0 && nID < 31 && ÇfÇe[319] == 2 && ÇfÇe[359] != nID)
		{
			ë∂ë±î‘çÜ = ÇfÇe[299];
			ãzé˚î‘çÜ = ÇfÇe[239 + nID];
			ÇfÇrî‘çÜ1 = ÇfÇrî‘çÜéÊìæ(ë∂ë±î‘çÜ, 999);
			ÇfÇrî‘çÜ = ÇfÇrî‘çÜéÊìæ(ãzé˚î‘çÜ, 999);
			ï∫éÌa = ï∫éÌåÛï‚(ë∂ë±î‘çÜ, ãzé˚î‘çÜ);
			ãZa = ãZåÛï‚(ë∂ë±î‘çÜ, ãzé˚î‘çÜ);
			lint w1 = 0;
			lint w2 = 0;
			lint w3 = 0;
			lint w4 = 0;
			lint w5 = 0;
			lint ë∂ë±î‘çÜ = ÇfÇe[299];
			ÇfÇe[326] = ãzé˚î‘çÜ;
			ÇfÇe[320] = 0;
			ÇfÇe[321] = 0;
			ÇfÇe[322] = 0;
			ÇfÇe[323] = 0;
			ÇfÇe[324] = 0;
			if (ÇfÇe[229] == 1)
			{
				w1 = ãZa;
				ÇfÇe[320] = ãZa;
			}
			if (ÇfÇe[229] == 2)
			{
				w2 = ãZa;
				ÇfÇe[321] = ãZa;
			}
			if (ÇfÇe[229] == 3)
			{
				w3 = ãZa;
				ÇfÇe[322] = ãZa;
			}
			if (ÇfÇe[229] == 4)
			{
				w4 = ãZa;
				ÇfÇe[323] = ãZa;
			}
			if (ÇfÇe[229] == 5)
			{
				w5 = ãZa;
				ÇfÇe[324] = ãZa;
			}
			if (ï∫éÌa != gs[1][ÇfÇrî‘çÜ1].ï∫éÌ)
			{
				ÇfÇe[420] = ÉfÉtÉHÉãÉgçUåÇãZî\(ï∫éÌa);
			}
			g_sInfo.setGattai(1, ë∂ë±î‘çÜ, w1, w2, ÇfÇe[420], w4, w5);
			lint ï∫éÌ2 = gs[ÇfÇe[418]][ÇfÇrî‘çÜ].ï∫éÌ;
			lint ï∫éÌÉOÉãÅ[Év2 = ïêè´ÉOÉãÅ[Év(ï∫éÌ2);
			lint ï∫éÌëIëâÊëú2 = ï∫éÌÉOÉãÅ[Év2 + 6099;
			if (ï∫éÌëIëâÊëú2 > 6099 && ï∫éÌëIëâÊëú2 < 6112)
			{
				ÇrÇo(ï∫éÌëIëâÊëú2, 1, 0);
			}
			ÇfÇe[359] = nID;
		}
		if (nID > 0 && nID < 31 && ÇfÇe[239] > 0 && ÇfÇe[360] != nID)
		{
			ãzé˚î‘çÜ = ÇfÇe[239 + nID];
			ÇfÇrî‘çÜ = ÇfÇrî‘çÜéÊìæ(ãzé˚î‘çÜ, 999);
			string szName = gs[ÇfÇe[418]][ÇfÇrî‘çÜ].ñºëO;
			äÁ(gs[ÇfÇe[418]][ÇfÇrî‘çÜ].ÇbÇf, szName, 1, 0);
			g_sInfo.setHeisu(í«â¡ï∫êîåvéZ(ÇfÇrî‘çÜ1, ÇfÇrî‘çÜ));
			ÇfÇe[360] = nID;
		}
		g_sComment.setPos(-1, -1);
		UPDATE();
		if (ÉLÅ[_åàíË())
		{
			if (this.checkClick(nID))
			{
				nRet = nID;
				break;
			}
		}
	}
	return nRet;
}

int tagSelect::checkMouse(int nID)
{
	int nID2 = nID;
	if (É}ÉEÉXóDêÊ())
	{
		int nNo = this.m_sButton.checkMouseRect(true, true);
		if (nNo > 0)
		{
			nID = this.m_sButton.getButtonID(nNo);
		}
		else
		{
			nID = 0;
		}
	}
	if (ÉLÅ[_âüâ∫(38))
	{
		return this.moveUp(nID);
	}
	if (ÉLÅ[_âüâ∫(40))
	{
		return this.moveDown(nID);
	}
	if (ÉLÅ[_âüâ∫(37))
	{
		return this.moveLeft(nID);
	}
	if (ÉLÅ[_âüâ∫(39))
	{
		return this.moveRight(nID);
	}
	if (nID != nID2)
	{
		this.setSelect(nID2, false);
		this.setSelect(nID, true);
		this.showComment(nID);
	}
	return nID;
}

bool tagSelect::checkClick(int nID)
{
	return this.m_sButton.checkClick(this.m_sButton.getButtonNo(nID));
}

void tagSelect::resetSelect()
{
	this.m_sButton.resetSelect();
}

void tagSelect::setSelect(int nID, bool bSelect)
{
	this.m_sButton.setButtonSelect(this.m_sButton.getButtonNo(nID), bSelect);
}

int tagSelect::setCursor(int nID)
{
	if (nID <= 0)
	{
		nID = this.getFirst();
	}
	this.m_sButton.setCursor(this.m_sButton.getButtonNo(nID));
	return nID;
}

void tagSelect::showComment(int nID)
{
	g_sComment.hide();
	int idx = this.search(nID);
	if (idx < 0)
	{
		return;
	}
	if (this.m_asData[idx].m_aszComment.Numof() > 0)
	{
		g_sComment.show2(this.m_asData[idx].m_aszComment);
	}
}

ref tagSprite tagSelect::getSp()
{
	return this.m_spBase;
}

void tagSelect::createBase(int nW, int nH, int nZ)
{
	int nX = this.m_nX;
	int nY = this.m_nY;
	nH += 12;
	if (nH > 665)
	{
		nH = 665;
	}
	int nH2 = nH + 3;
	if (nX < 0)
	{
		nX = (âÊñ ïù() - nW) / 2;
	}
	if (nY < 0)
	{
		nY = (âÊñ çÇÇ≥() - nH2) / 2;
	}
	this.m_spBase.createPixelOnly(nW, nH2);
	this.m_spBase.setPos(nX, nY);
	this.m_spBase.setZ(nZ);
	this.m_spBase.blendCg2(0, 0, 10059);
	this.m_spBase.blendCg2(0, nH, 10060);
}

int tagSelect::createButton(int nH, ref tagSelectData rfData, ref tagSelectData rfOld)
{
	if (rfData === NULL)
	{
		return nH;
	}
	if (rfOld !== NULL)
	{
		if (rfOld.m_nID > 0)
		{
			nH += 6;
		}
		else if (rfOld.m_nID == 0)
		{
			nH += 12;
		}
		else
		{
			nH += 10;
		}
	}
	else
	{
		nH = 42;
	}
	int nNo = 0;
	array@tagSprite aspWork[5];
	g_sSelectCg.createSp(rfData.m_szText, rfData.m_nR, rfData.m_nG, rfData.m_nB, aspWork);
	nNo = this.m_sButton.addButtonSp(aspWork[0], aspWork[1], aspWork[2], aspWork[3], aspWork[4]);
	this.m_sButton.setButtonPos(nNo, 26, nH - 3);
	this.m_sButton.setButtonActive(nNo, true);
	this.m_sButton.setButtonID(nNo, rfData.m_nID);
	return nH + 26;
}

int tagSelect::createText(int nH, ref tagSelectData rfData, ref tagSelectData rfOld)
{
	if (rfData === NULL)
	{
		return nH;
	}
	if (rfOld !== NULL)
	{
		if (rfOld.m_nID > 0)
		{
			nH += 12;
		}
		else if (rfOld.m_nID == 0)
		{
			nH += 2;
		}
		else
		{
			nH += 10;
		}
	}
	else
	{
		nH = 42;
	}
	int i = 0;
	int cnt = 0;
	array@string aszText;
	cnt = ÉeÉLÉXÉgï™äÑ(rfData.m_szText, 17, aszText);
	if (cnt < 1)
	{
		return nH;
	}
	ref tagSprite rfSp = this.searchSp();
	if (rfSp === NULL)
	{
		return nH;
	}
	int nH2 = 22 * cnt + 2 * (cnt - 1);
	sact_text_metrics_t tmText;
	tmText.nSize = 20;
	tmText.nColorR = rfData.m_nR;
	tmText.nColorG = rfData.m_nG;
	tmText.nColorB = rfData.m_nB;
	tmText.nWeight = 1400;
	tmText.nFace = 0;
	rfSp.create(364, nH2, 0, 0, 0, 0);
	rfSp.setPos(5, nH);
	int nX = 0;
	int nY = 0;
	int nTextX = 12;
	int nTextY = 1;
	for (i = 0; i < cnt; ++i)
	{
		drawGraph_Fill(rfSp, nX, nY, 364, 22, 255, 255, 255);
		drawGraph_FillAMap(rfSp, nX, nY, 364, 22, 140);
		rfSp.textDrawPos(nX + nTextX, nY + nTextY, aszText[i], tmText, false);
		nY += 24;
	}
	return nH + nH2;
}

int tagSelect::createSeparator(int nH, ref tagSelectData rfData, ref tagSelectData rfOld)
{
	if (rfData === NULL)
	{
		return nH;
	}
	if (rfOld !== NULL)
	{
		if (rfOld.m_nID > 0)
		{
			nH += 10;
		}
		else if (rfOld.m_nID == 0)
		{
			nH += 10;
		}
		else
		{
			nH += 10;
		}
	}
	else
	{
		nH = 42;
	}
	ref tagSprite rfSp = this.searchSp();
	if (rfSp === NULL)
	{
		return nH;
	}
	rfSp.createPixelOnly(364, 4);
	rfSp.setPos(5, nH);
	drawGraph_Fill(rfSp, 0, 0, 364, 4, rfData.m_nR, rfData.m_nG, rfData.m_nB);
	return nH + 4;
}

int tagSelect::moveUp(int nID)
{
	int nID2 = nID;
	int nTime = 250;
	while (ÉLÅ[_âüâ∫(38))
	{
		nID = this.getPrev(nID);
		if (nID == nID2)
		{
			break;
		}
		this.setSelect(nID2, false);
		this.setSelect(nID, true);
		nID2 = nID;
		UPDATE();
		if (!ÉLÅ[_ó£Çµë“Çø_É^ÉCÉ}(nTime, 38))
		{
			break;
		}
		nTime = 50;
	}
	ÉLÅ[_ó£Çµë“Çø(38);
	ÉLÅ[_ÉNÉäÉA(true);
	return nID;
}

int tagSelect::moveDown(int nID)
{
	int nID2 = nID;
	int nTime = 250;
	while (ÉLÅ[_âüâ∫(40))
	{
		nID = this.getNext(nID);
		if (nID == nID2)
		{
			break;
		}
		this.setSelect(nID2, false);
		this.setSelect(nID, true);
		nID2 = nID;
		UPDATE();
		if (!ÉLÅ[_ó£Çµë“Çø_É^ÉCÉ}(nTime, 40))
		{
			break;
		}
		nTime = 50;
	}
	ÉLÅ[_ó£Çµë“Çø(40);
	ÉLÅ[_ÉNÉäÉA(true);
	return nID;
}

int tagSelect::moveLeft(int nID)
{
	int nID2 = nID;
	nID = this.getFirst();
	if (nID != nID2)
	{
		this.setSelect(nID2, false);
		this.setSelect(nID, true);
		UPDATE();
	}
	ÉLÅ[_ó£Çµë“Çø(37);
	ÉLÅ[_ÉNÉäÉA(true);
	return nID;
}

int tagSelect::moveRight(int nID)
{
	int nID2 = nID;
	nID = this.getLast();
	if (nID != nID2)
	{
		this.setSelect(nID2, false);
		this.setSelect(nID, true);
		UPDATE();
	}
	ÉLÅ[_ó£Çµë“Çø(37);
	ÉLÅ[_ÉNÉäÉA(true);
	return nID;
}

void tagSelect::setDataPos(int nX, int nY, int nZ)
{
	int i = 0;
	int cnt = this.m_aspSp.Numof();
	int nX2 = 0;
	int nY2 = 0;
	ref tagSprite rfSp;
	for (i = 0; i < cnt; ++i)
	{
		rfSp <- this.m_aspSp[i];
		nX2 = nX + rfSp.getPosX();
		nY2 = nY + rfSp.getPosY();
		rfSp.setPos(nX2, nY2);
		rfSp.setZ(nZ + 1);
	}
	cnt = this.m_sButton.getCount();
	for (i = 1; i <= cnt; ++i)
	{
		nX2 = nX + this.m_sButton.getButtonPosX(i);
		nY2 = nY + this.m_sButton.getButtonPosY(i);
		this.m_sButton.setButtonPos(i, nX2, nY2);
	}
}

void tagSelect::setDefault()
{
	this.m_nX = -1;
	this.m_nY = -1;
	this.m_nCursorID = -1;
}

int tagSelect::getPrev(int nID)
{
	int idx = this.search(nID);
	if (idx < 0)
	{
		return this.getLast();
	}
	int i = 0;
	int cnt = this.m_asData.Numof();
	for (i = idx - 1; i >= 0; --i)
	{
		int nID2 = this.m_asData[i].m_nID;
		if (nID2 > 0)
		{
			return nID2;
		}
	}
	for (i = cnt - 1; i > idx; --i)
	{
		int nID2 = this.m_asData[i].m_nID;
		if (nID2 > 0)
		{
			return nID2;
		}
	}
	return nID;
}

int tagSelect::getNext(int nID)
{
	int idx = this.search(nID);
	if (idx < 0)
	{
		return this.getLast();
	}
	int i = 0;
	int cnt = this.m_asData.Numof();
	for (i = idx + 1; i < cnt; ++i)
	{
		int nID2 = this.m_asData[i].m_nID;
		if (nID2 > 0)
		{
			return nID2;
		}
	}
	for (i = 0; i < idx; ++i)
	{
		int nID2 = this.m_asData[i].m_nID;
		if (nID2 > 0)
		{
			return nID2;
		}
	}
	return nID;
}

int tagSelect::getFirst()
{
	int i = 0;
	int cnt = this.m_asData.Numof();
	for (i = 0; i < cnt; ++i)
	{
		int nID2 = this.m_asData[i].m_nID;
		if (nID2 > 0)
		{
			return nID2;
		}
	}
	return 0;
}

int tagSelect::getLast()
{
	int i = 0;
	int cnt = this.m_asData.Numof();
	for (i = cnt - 1; i >= 0; --i)
	{
		int nID2 = this.m_asData[i].m_nID;
		if (nID2 > 0)
		{
			return nID2;
		}
	}
	return 0;
}

int tagSelect::search(int nID)
{
	if (nID <= 0)
	{
		return -1;
	}
	int i = 0;
	int cnt = this.m_asData.Numof();
	for (i = 0; i < cnt; ++i)
	{
		if (this.m_asData[i].m_nID == nID)
		{
			return i;
		}
	}
	return -1;
}

ref tagSprite tagSelect::searchSp()
{
	int i = 0;
	int cnt = this.m_aspSp.Numof();
	for (i = 0; i < cnt; ++i)
	{
		if (!this.m_aspSp[i].isCreate())
		{
			return this.m_aspSp[i];
		}
	}
	return NULL;
}

