void マップ_初期化()
{
	g_sMap.create();
	g_sSystemBar.create();
	g_sInfo.create(921);
	g_sComment.create();
}

void マップ_終了処理()
{
	g_sMapControl.delete();
	g_sMap.delete();
	g_sSystemBar.delete();
	g_sInfo.delete();
	g_sComment.delete();
	g_sChiiki.clearBackup();
	g_sBusho.clearBackup();
	g_sSansen.clearBackup();
}

void マップ_作成()
{
	g_sMap.create();
	g_sMapControl.create(2);
}

void マップ_削除()
{
	g_sBusho.clear();
	g_sMapControl.delete();
}

void マップ_点滅()
{
	g_sKuni.blink();
}

void マップ_点滅停止()
{
	g_sKuni.blinkEnd();
}

void マップ_地域更新()
{
	勢力看板_削除();
	g_sMap.chiiki();
	EFFECT(1, 100, 0);
}

void マップ_情報更新(bool bAnime)
{
	g_sSystemBar.setInfo(bAnime);
	UPDATE();
}

void マップ_武将情報更新(int nBushoNo, int nSeiryokuNo)
{
	if (nBushoNo <= 0)
	{
		nBushoNo = g_sBusho.getSelectNo(-1);
	}
	if (nSeiryokuNo < 0)
	{
		nSeiryokuNo = g_sBusho.getSeiryokuNo();
	}
	g_sInfo.set(nSeiryokuNo, nBushoNo);
	bool bShow = g_sInfo.getShow();
	g_sForce.setFullShow(!bShow);
	g_sSansen.setInfoShow(!bShow);
}

int Ｐ地域／場所選択()
{
	システム_自動セーブ();
	int nRet = 0;
	while (true)
	{
		音楽／コマンド画面();
		nRet = g_sMapControl.run(2);
		if (nRet >= 0)
		{
			break;
		}
		捕虜メイン();
		g_sSystemBar.setHoryo(false);
	}
	マップ_情報更新(false);
	return nRet;
}

int Ｐ地域／コマンド()
{
	return g_sMapControl.getCommandNo();
}

int Ｐ合戦／選択()
{
	return g_sMap.getMapNo();
}

int Ｐ武将／参加選択(int nフラグ, int n国番号, int n現在値, int n難易度, int n対象技能, int n説明ＣＧ番号)
{
	int nRet = 0;
	int nMusicNo = 曲番号();
	g_n斥候難易度 = 0;
	音楽／参加選択画面(nフラグ);
	if (nフラグ == 1)
	{
		nRet = Ｐ武将／参加選択／合戦(nフラグ, n国番号, n現在値, n難易度, n対象技能);
	}
	else if (nフラグ == 5)
	{
		nRet = Ｐ武将／参加選択／迷宮(nフラグ, n国番号, n現在値, n難易度, n対象技能);
	}
	else if (nフラグ == 2)
	{
		nRet = Ｐ武将／参加選択／捕虜(nフラグ, n国番号, n現在値, n難易度, n対象技能, n説明ＣＧ番号);
	}
	else if (nフラグ == 3 || nフラグ == 4)
	{
		nRet = Ｐ武将／参加選択／汎用(nフラグ, n国番号, n現在値, n難易度, n対象技能, n説明ＣＧ番号);
	}
	if (nRet <= 0)
	{
		キャラ参加登録初期化();
		nRet = 0;
	}
	マップ_情報更新(false);
	return nRet;
}

int Ｐ武将／参加選択／合戦(int nフラグ, int n国番号, int n合戦タイプ, int n敵勢力, int n対象技能)
{
	int nRet = 0;
	int n味方勢力 = 変数_味方勢力();
	int n斥候現在値 = 0;
	int n斥候難易度 = 参加選択／斥候難易度(n国番号, n合戦タイプ);
	if (n斥候難易度 > 2 && Ｃ技能総数取得(734, 999) > 0)
	{
		n斥候難易度 = 2;
	}
	int n斥候モード = n斥候難易度 > 0 ? 1 : 0;
	int i = 0;
	int nSeiryokuNo = 変数_味方勢力();
	int nBushoNo = 0;
	int nPos = 0;
	array@int anPos[6];
	anPos.Fill(0, 6, 0);
	for (i = 0; i < 6; ++i)
	{
		nBushoNo = 41 + i;
		if (キャラ_番号(nSeiryokuNo, nBushoNo) > 0)
		{
			anPos[i] = キャラ_作戦参加(nSeiryokuNo, nBushoNo);
		}
	}
	キャラ参加登録初期化();
	if (n合戦タイプ == 1)
	{
		Ｐ合戦前表示(n味方勢力, n敵勢力, n国番号);
	}
	if (n合戦タイプ == 2)
	{
		Ｐ合戦前表示(n敵勢力, n味方勢力, n国番号);
	}
	g_sSansen.clearBackup();
	for (i = 0; i < 6; ++i)
	{
		nBushoNo = 41 + i;
		nPos = anPos[i];
		if (nPos > 0)
		{
			キャラ_作戦参加設定(nSeiryokuNo, nBushoNo, nPos);
			g_sSansen.setBackup(nPos - 1, nSeiryokuNo, nBushoNo);
		}
	}
	int nType = 12;
	while (true)
	{
		g_sMapControl.setParam(nフラグ, n国番号, n合戦タイプ, n敵勢力, n対象技能, 6, n斥候モード, 0);
		nRet = g_sMapControl.run(nType);
		if (nRet >= 0)
		{
			break;
		}
		if (Ｐ武将／参加選択／斥候(n国番号, n斥候現在値, n斥候難易度))
		{
			n斥候モード = 2;
			nType = 19;
			g_n斥候難易度 = n斥候難易度;
		}
	}
	return nRet;
}

bool Ｐ武将／参加選択／斥候(int n国番号, ref int n現在値, int n難易度)
{
	bool bRet = false;
	int nRet = 0;
	int i = 0;
	int nNo = 0;
	キャラ_参加外し();
	▲文字列 = "為了探索敵人的戰鬥力，派遣偵察兵";
	nRet = Ｐ武将／参加選択(3, n国番号, n現在値, n難易度, 1, 10353);
	if (nRet >= 0)
	{
		n現在値 = n難易度;
		if (n現在値 >= n難易度)
		{
			ＳＭ(5053, 0, 0);
			bRet = true;
		}
		else
		{
			ＳＭ(5012, 0, 0);
		}
	}
	キャラ_参加戻し();
	return bRet;
}

int Ｐ武将／参加選択／迷宮(int nフラグ, int n国番号, int n合戦タイプ, int n勢力番号, int n対象技能)
{
	システムバー_無効設定(false, false, true, true);
	キャラ参加登録初期化();
	g_sSansen.clearBackup();
	g_sMapControl.setParam(nフラグ, n国番号, n合戦タイプ, n勢力番号, n対象技能, 6, 0, 0);
	int nRet = g_sMapControl.run(12);
	システムバー_有効設定(false, false, true, true);
	return nRet;
}

int Ｐ武将／参加選択／捕虜(int nフラグ, int n国番号, int n現在値, int n難易度, int n対象技能, int n説明ＣＧ番号)
{
	キャラ参加登録初期化();
	g_sMapControl.setParam(nフラグ, n国番号, n現在値, n難易度, n対象技能, 5, n説明ＣＧ番号, 0);
	return g_sMapControl.run(11);
}

int Ｐ武将／参加選択／汎用(int nフラグ, int n国番号, int n現在値, int n難易度, int n対象技能, int n説明ＣＧ番号)
{
	キャラ参加登録初期化();
	g_sMapControl.setParam(nフラグ, n国番号, n現在値, n難易度, n対象技能, 5, n説明ＣＧ番号, 0);
	return g_sMapControl.run(11);
}

void Ｐ合戦前表示(int n攻撃側勢力番号, int n防御側勢力番号, int n国番号)
{
	if (勢力看板_合戦(n攻撃側勢力番号, n防御側勢力番号, n国番号))
	{
		return;
	}
	勢力看板_削除();
	g_sMap.kassen(n攻撃側勢力番号, n防御側勢力番号, n国番号);
}

int Ｐ捕虜／処遇決定(ref lint n番号)
{
	int nRet = 0;
	n番号 = 0;
	音楽／コマンド画面();
	nRet = g_sMapControl.run(18);
	if (nRet <= 0)
	{
		g_sSystemBar.setHoryo(false);
		goto label0;
	}
	int nBushoNo = nRet;
	int nValue = キャラ_捕虜抵抗値(20, nBushoNo);
	nRet = Ｐ武将／参加選択(2, nBushoNo, 0, nValue, 2, 10352);
	if (nRet <= 0)
	{
		g_sSystemBar.setHoryo(false);
		マップ_情報更新(false);
		goto label0;
	}
	if (キャラ_捕虜抵抗値設定(20, nBushoNo, nValue - nRet) > 0)
	{
		nRet = 3;
		goto label0;
	}
	n番号 = nBushoNo;
	nRet = 2;
label0:
	マップ_情報更新(false);
	return nRet;
}

int Ｐ迷宮／選択(int n国番号)
{
	int nRet = 0;
	音楽／参加選択画面(5);
	システムバー_無効設定(false, true, true, true);
	g_sMapControl.setParam(0, n国番号, 0, 0, 0, 0, 0, 0);
	nRet = g_sMapControl.run(13);
	システムバー_有効設定(false, true, true, true);
	if (ＧＦ[373] == 0)
	{
		音楽(0, 0, false);
	}
	return nRet;
}

void Ｐ地図マーク表示(int n国番号)
{
	g_sKuni.blinkMark(n国番号, 1000);
}

void システムバー_有効設定(bool bMenu, bool bItem, bool bForce, bool bHoryo)
{
	if (bMenu)
	{
		g_sSystemBar.setStatus(90001, 1);
	}
	if (bItem)
	{
		g_sSystemBar.setStatus(90002, 1);
	}
	if (bForce)
	{
		g_sSystemBar.setStatus(90003, 1);
	}
	if (bHoryo)
	{
		g_sSystemBar.setHoryoStatus();
	}
}

void システムバー_無効設定(bool bMenu, bool bItem, bool bForce, bool bHoryo)
{
	if (bMenu)
	{
		g_sSystemBar.setStatus(90001, 0);
	}
	if (bItem)
	{
		g_sSystemBar.setStatus(90002, 0);
	}
	if (bForce)
	{
		g_sSystemBar.setStatus(90003, 0);
	}
	if (bHoryo)
	{
		g_sSystemBar.setStatus(90004, 0);
	}
}

int 参加選択／斥候難易度(int n国番号, int n合戦タイプ)
{
	if (n合戦タイプ != 1 && n合戦タイプ != 2)
	{
		return 0;
	}
	int n難易度 = 乱数(4);
	if (n合戦タイプ == 1)
	{
		switch (国_施設(n国番号, 合戦_土地(n合戦タイプ, n国番号)))
		{
			case 1:
				n難易度 += 1;
				break;
			case 2:
				n難易度 += 2;
				break;
			case 3:
				n難易度 += 3;
				break;
			case 4:
			default:
				break;
		}
	}
	if (アイテム保有者番号(80) > 0)
	{
		return n難易度 > 3 ? 3 : n難易度;
	}
	return n難易度;
}

