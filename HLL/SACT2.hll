int Init(IMainSystem pIMainSystem, int nCGCacheSize);
int Error(string strErr);
int SetWP(int nCG);
int SetWP_Color(int nR, int nG, int nB);
int WP_GetSP(int nSP);
int WP_SetSP(int nSP);
int GetScreenWidth(void);
int GetScreenHeight(void);
int GetMainSurfaceNumber(void);
int Update(void);
int Effect(int nType, int nTime, int nfKey);
int EffectSetMask(int nCG);
int EffectSetMaskSP(int nSP);
void QuakeScreen(int nAmplitudeX, int nAmplitudeY, int nTime, int nfKey);
void QUAKE_SET_CROSS(int nAmpX, int nAmpY);
void QUAKE_SET_ROTATION(int nAmp, int nCycle);
int SP_GetUnuseNum(int nMin);
int SP_Count(void);
int SP_Enum(ref array@int anSP);
int SP_GetMaxZ(void);
int SP_SetCG(int nSP, int nCG);
int SP_SetCGFromFile(int nSP, string pIStringFileName);
int SP_SaveCG(int nSP, string pIStringFileName);
int SP_Create(int nSP, int nWidth, int nHeight, int nR, int nG, int nB, int nBlendRate);
int SP_CreatePixelOnly(int nSP, int nWidth, int nHeight);
int SP_CreateCustom(int nSP);
int SP_Delete(int nSP);
int SP_SetPos(int nSP, int nX, int nY);
int SP_SetX(int nSP, int nX);
int SP_SetY(int nSP, int nY);
int SP_SetZ(int nSP, int nZ);
int SP_SetBlendRate(int nSP, int nBlendRate);
int SP_SetShow(int nSP, int nfShow);
int SP_SetDrawMethod(int nSP, int nMethod);
int SP_IsUsing(int nSP);
int SP_ExistAlpha(int nSP);
int SP_GetPosX(int nSP);
int SP_GetPosY(int nSP);
int SP_GetWidth(int nSP);
int SP_GetHeight(int nSP);
int SP_GetZ(int nSP);
int SP_GetBlendRate(int nSP);
int SP_GetShow(int nSP);
int SP_GetDrawMethod(int nSP);
int SP_SetTextHome(int nSP, int nX, int nY);
int SP_SetTextLineSpace(int nSP, int nPx);
int SP_SetTextCharSpace(int nSP, int nPx);
int SP_SetTextPos(int nSP, int nX, int nY);
bool SP_TextScroll(int sp, int dx, int dy);
int SP_TextDraw(int nSP, string text, struct tm);
int SP_TextClear(int nSP);
int SP_TextHome(int nSP, int nTextSize);
int SP_TextNewLine(int nSP, int nTextSize);
int SP_TextBackSpace(int nSP);
int SP_TextCopy(int nDstSP, int nSrcSP);
int SP_GetTextHomeX(int nSP);
int SP_GetTextHomeY(int nSP);
int SP_GetTextCharSpace(int nSP);
int SP_GetTextPosX(int nSP);
int SP_GetTextPosY(int nSP);
int SP_GetTextLineSpace(int nSP);
int SP_IsPtIn(int nSP, int nX, int nY);
int SP_IsPtInRect(int nSP, int nX, int nY);
int GAME_MSG_GetNumof(void);
void GAME_MSG_Get(int nIndex, ref string text);
void IntToZenkaku(ref string s, int nValue, int nFigures, int nfZeroPadding);
void IntToHankaku(ref string s, int nValue, int nFigures, int nfZeroPadding);
int StringPopFront(ref string sDst, ref string sSrc);
int Mouse_GetPos(ref int pnX, ref int pnY);
int Mouse_SetPos(int nX, int nY);
void Mouse_ClearWheel(void);
void Mouse_GetWheel(ref int pnForward, ref int pnBack);
void Joypad_ClearKeyDownFlag(int nNum);
int Joypad_IsKeyDown(int nNum, int nKey);
int Joypad_GetNumof(void);
void JoypadQuake_Set(int nNum, int nType, int nMagnitude);
int Key_ClearFlag(void);
int Key_IsDown(int nKeyCode);
int Timer_Get(void);
int CG_IsExist(int nCG);
int CG_GetMetrics(int nCG, ref struct cm);
int CSV_Load(string pIStringFileName);
int CSV_Save(void);
int CSV_SaveAs(string pIStringFileName);
int CSV_CountLines(void);
int CSV_CountColumns(void);
void CSV_Get(ref string pIString, int nLine, int nColumn);
int CSV_Set(int nLine, int nColumn, string pIStringData);
int CSV_GetInt(int nLine, int nColumn);
void CSV_SetInt(int nLine, int nColumn, int nData);
void CSV_Realloc(int nLines, int nColumns);
int Music_IsExist(int nNum);
int Music_Prepare(int nCh, int nNum);
int Music_Unprepare(int nCh);
int Music_Play(int nCh);
int Music_Stop(int nCh);
int Music_IsPlay(int nCh);
int Music_SetLoopCount(int nCh, int nCount);
int Music_GetLoopCount(int nCh);
int Music_SetLoopStartPos(int nCh, int dwPos);
int Music_SetLoopEndPos(int nCh, int dwPos);
int Music_Fade(int nCh, int nTime, int nVolume, int bStop);
int Music_StopFade(int nCh);
int Music_IsFade(int nCh);
int Music_Pause(int nCh);
int Music_Restart(int nCh);
int Music_IsPause(int nCh);
int Music_GetPos(int nCh);
int Music_GetLength(int nCh);
int Music_GetSamplePos(int nCh);
int Music_GetSampleLength(int nCh);
int Music_Seek(int nCh, int dwPos);
int Music_GetSampleData(int nCh, ref array@int anDst, int nSamplePos);
int Music_MillisecondsToSamples(int nMillisec, int nSamplesPerSec);
int Music_GetFormat(int nCh, ref int pnSamplesPerSec, ref int pnBitsPerSample, ref int pnChannels);
int Sound_IsExist(int nNum);
int Sound_GetUnuseChannel(void);
int Sound_Prepare(int nCh, int nNum);
int Sound_Unprepare(int nCh);
int Sound_Play(int nCh);
int Sound_Stop(int nCh);
int Sound_IsPlay(int nCh);
int Sound_SetLoopCount(int nCh, int nCount);
int Sound_GetLoopCount(int nCh);
int Sound_Fade(int nCh, int nTime, int nVolume, int bStop);
int Sound_StopFade(int nCh);
int Sound_IsFade(int nCh);
int Sound_GetPos(int nCh);
int Sound_GetLength(int nCh);
int Sound_ReverseLR(int nCh);
int Sound_GetVolume(int nCh);
int Sound_GetTimeLength(int nCh);
int Sound_GetGroupNum(int nCh);
bool Sound_PrepareFromFile(int nCh, string szFileName);
void System_GetDate(ref int pnYear, ref int pnMonth, ref int pnDay, ref int pnDayOfWeek);
void System_GetTime(ref int pnHour, ref int pnMinute, ref int pnSecond, ref int pnMilliSeconds);
void CG_RotateRGB(int nDest, int nDx, int nDy, int nWidth, int nHeight, int nRotateType);
void CG_BlendAMapBin(int nDest, int nDx, int nDy, int nSrc, int nSx, int nSy, int nWidth, int nHeight, int nBorder);
void Debug_Pause(void);
void Debug_GetFuncStack(ref string sz, int nNest);
int SP_GetAMapValue(int nSP, int nX, int nY);
bool SP_GetPixelValue(int nSP, int nX, int nY, ref int pnR, ref int pnG, ref int pnB);
int SP_SetBrightness(int nSP, int nBrightness);
int SP_GetBrightness(int nSP);
int SP_CreateCopy(int nSP, int nSrcSp);
bool Joypad_GetAnalogStickStatus(int nNum, int nType, ref float pfDegree, ref float pfPower);
bool Joypad_GetDigitalStickStatus(int nNum, int nType, ref bool pbLeft, ref bool pbRight, ref bool pbUp, ref bool pbDown);
void FFT_rdft(ref array@float a);
void FFT_hanning_window(ref array@float a);
int Music_AnalyzeSampleData(ref array@float l, ref array@float r, ref array@int src, int chns, int bps);
void Key_ClearFlagNoCtrl(void);
void Key_ClearFlagOne(int nKeyCode);
