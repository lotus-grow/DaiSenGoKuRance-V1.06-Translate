int sact_num_cg_t::Init(int nSP, int nFigures, int bZeroPadding, int nSpace)
{
	if (nSP == 0)
	{
		this.m_nSP = SP_GET_UNUSE_NUM(1, 1);
	}
	else
	{
		this.m_nSP = nSP;
	}
	this.m_nFigures = nFigures;
	this.m_bZeroPadding = bZeroPadding;
	this.m_nSpace = nSpace;
	return this.m_nSP;
}

int sact_num_cg_t::GetSpriteNum()
{
	return this.m_nSP;
}

void sact_num_cg_t::SetCG(int n0, int n1, int n2, int n3, int n4, int n5, int n6, int n7, int n8, int n9)
{
	int i = 0;
	int nSP = 0;
	int w = 0;
	int h = 0;
	int wa = 0;
	assert(n0);
	if (this.m_nCG.Numof() != 0)
	{
		this.m_nCG.Free();
	}
	this.m_nCG.Alloc(10);
	if (this.m_nW.Numof() != 0)
	{
		this.m_nW.Free();
	}
	this.m_nW.Alloc(10);
	if (this.m_nH.Numof() != 0)
	{
		this.m_nH.Free();
	}
	this.m_nH.Alloc(10);
	if (n1 == 0)
	{
		n1 = n0 + 1;
	}
	if (n2 == 0)
	{
		n2 = n1 + 1;
	}
	if (n3 == 0)
	{
		n3 = n2 + 1;
	}
	if (n4 == 0)
	{
		n4 = n3 + 1;
	}
	if (n5 == 0)
	{
		n5 = n4 + 1;
	}
	if (n6 == 0)
	{
		n6 = n5 + 1;
	}
	if (n7 == 0)
	{
		n7 = n6 + 1;
	}
	if (n8 == 0)
	{
		n8 = n7 + 1;
	}
	if (n9 == 0)
	{
		n9 = n8 + 1;
	}
	this.m_nCG[0] = n0;
	this.m_nCG[1] = n1;
	this.m_nCG[2] = n2;
	this.m_nCG[3] = n3;
	this.m_nCG[4] = n4;
	this.m_nCG[5] = n5;
	this.m_nCG[6] = n6;
	this.m_nCG[7] = n7;
	this.m_nCG[8] = n8;
	this.m_nCG[9] = n9;
	wa = 0;
	this.m_nMaxH = 0;
	for (i = 0; i < 10; ++i)
	{
		nSP = SP_GET_UNUSE_NUM(1, 1);
		SP_SET_CG(nSP, this.m_nCG[i], 1);
		SP_GET_SIZE(nSP, this.m_nW[i], this.m_nH[i]);
		SP_DEL(nSP, 1);
		wa += this.m_nW[i];
		if (this.m_nH[i] > this.m_nMaxH)
		{
			this.m_nMaxH = this.m_nH[i];
		}
	}
	this.m_nAveW = wa / 10;
}

void sact_num_cg_t::SetValue(int nValue, int bUpdate)
{
	string s = "";
	int c = 0;
	int i = 0;
	int w = 0;
	int x = 0;
	int nSP = 0;
	int n = 0;
	this.m_nValue = nValue;
	if (this.m_nSP == 0)
	{
		system.Error("エラー:sact_num_cg Init() 呼び出し前に SetValue が呼ばれています。");
		return;
	}
	s = NUM_TO_HANKAKU(this.m_nValue, this.m_nFigures, this.m_bZeroPadding);
	c = s.Length();
	w = 0;
	for (i = 0; i < c; ++i)
	{
		if (s[i] >= '0' && s[i] <= '9')
		{
			w += this.m_nW[s[i] - '0'];
		}
		else
		{
			w += this.m_nAveW;
		}
	}
	SP_CREATE(this.m_nSP, w, this.m_nMaxH, 0, 0, 0, 0, 1);
	x = 0;
	for (i = 0; i < c; ++i)
	{
		if (s[i] >= '0' && s[i] <= '9')
		{
			n = s[i] - '0';
			nSP = SP_GET_UNUSE_NUM(1, 1);
			SP_SET_CG(nSP, this.m_nCG[n], 1);
			CG_BLEND_AMAP_BIN(this.m_nSP, x, this.m_nMaxH - this.m_nH[n], nSP, 0, 0, this.m_nW[n], this.m_nH[n], 1);
			CG_COPY_AMAP_MAX(this.m_nSP, x, this.m_nMaxH - this.m_nH[n], nSP, 0, 0, this.m_nW[n], this.m_nH[n]);
			SP_DEL(nSP, 1);
			x += this.m_nW[n] + this.m_nSpace;
		}
		else
		{
			x += this.m_nAveW + this.m_nSpace;
		}
	}
	if (bUpdate)
	{
		SACT_UPDATE(1);
	}
}

sact_num_cg_t::sact_num_cg_t()
{
	this.m_nSP = 0;
	this.m_nFigures = 0;
	this.m_bZeroPadding = 0;
	this.m_nValue = 0;
	this.m_nAveW = 0;
	this.m_nMaxH = 0;
	this.m_nSpace = 0;
}

sact_num_cg_t::~sact_num_cg_t()
{
	if (this.m_nSP != 0)
	{
		SP_DEL(this.m_nSP, 1);
	}
}

