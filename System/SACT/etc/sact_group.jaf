sact_group_t::sact_group_t()
{
	this.m_bAutoDelete = 0;
}

sact_group_t::~sact_group_t()
{
	int i = 0;
	int c = 0;
	if (this.m_bAutoDelete)
	{
		c = this.m_nSP.Numof();
		for (i = 0; i < c; ++i)
		{
			SP_DEL(this.m_nSP[i], 1);
		}
	}
}

void sact_group_t::SetAutoDel()
{
	this.m_bAutoDelete = 1;
}

void sact_group_t::Clear(int bDeleteSP)
{
	int i = 0;
	int c = this.m_nSP.Numof();
	if (c != 0)
	{
		if (bDeleteSP)
		{
			for (i = 0; i < c; ++i)
			{
				SP_DEL(this.m_nSP[i], 1);
			}
		}
		this.m_nSP.Free();
	}
}

void sact_group_t::Add1(int nSP)
{
	int i = 0;
	int c = this.m_nSP.Numof();
	for (i = 0; i < c; ++i)
	{
		if (this.m_nSP[i] == nSP)
		{
			return;
		}
	}
	this.m_nSP.Realloc(c + 1);
	this.m_nSP[c] = nSP;
}

void sact_group_t::Add(int nSP01, int nSP02, int nSP03, int nSP04, int nSP05, int nSP06, int nSP07, int nSP08, int nSP09, int nSP10)
{
	if (nSP01 != 0)
	{
		this.Add1(nSP01);
	}
	if (nSP02 != 0)
	{
		this.Add1(nSP02);
	}
	if (nSP03 != 0)
	{
		this.Add1(nSP03);
	}
	if (nSP04 != 0)
	{
		this.Add1(nSP04);
	}
	if (nSP05 != 0)
	{
		this.Add1(nSP05);
	}
	if (nSP06 != 0)
	{
		this.Add1(nSP06);
	}
	if (nSP07 != 0)
	{
		this.Add1(nSP07);
	}
	if (nSP08 != 0)
	{
		this.Add1(nSP08);
	}
	if (nSP09 != 0)
	{
		this.Add1(nSP09);
	}
	if (nSP10 != 0)
	{
		this.Add1(nSP10);
	}
}

int sact_group_t::AddNew()
{
	int nSP = SP_GET_UNUSE_NUM(1, 1);
	this.Add1(nSP);
	return nSP;
}

void sact_group_t::AddArray(array@int vSP)
{
	int c = vSP.Numof();
	int i = 0;
	for (i = 0; i < c; ++i)
	{
		this.Add1(vSP[i]);
	}
}

void sact_group_t::Erase(int nSP, int bDeleteSP)
{
	int i = 0;
	int j = 0;
	int c = this.m_nSP.Numof();
	for (i = 0; i < c; ++i)
	{
		if (this.m_nSP[i] == nSP)
		{
			if (bDeleteSP)
			{
				SP_DEL(this.m_nSP[i], 1);
			}
			for (j = i; j < c - 1; ++j)
			{
				this.m_nSP[j] = this.m_nSP[j + 1];
			}
			this.m_nSP.Realloc(c - 1);
			return;
		}
	}
}

int sact_group_t::Numof()
{
	return this.m_nSP.Numof();
}

int sact_group_t::GetSpriteNum(int nIndex)
{
	return this.m_nSP[nIndex];
}

void sact_group_t::SetCG(int nCG)
{
	int i = 0;
	int c = this.m_nSP.Numof();
	for (i = 0; i < c; ++i)
	{
		SP_SET_CG(this.m_nSP[i], nCG, 1);
	}
}

void sact_group_t::Copy(int nSrcSP)
{
	int i = 0;
	int c = this.m_nSP.Numof();
	for (i = 0; i < c; ++i)
	{
		SP_COPY(this.m_nSP[i], nSrcSP, 0);
	}
}

void sact_group_t::Create(int nWidth, int nHeight, int nR, int nG, int nB, int nBlendRate)
{
	int i = 0;
	int c = this.m_nSP.Numof();
	for (i = 0; i < c; ++i)
	{
		SP_CREATE(this.m_nSP[i], nWidth, nHeight, nR, nG, nB, nBlendRate, 1);
	}
}

void sact_group_t::SetPos(int nX, int nY)
{
	int i = 0;
	int c = this.m_nSP.Numof();
	for (i = 0; i < c; ++i)
	{
		SP_SET_POS(this.m_nSP[i], nX, nY);
	}
}

void sact_group_t::AddPos(int nAddX, int nAddY)
{
	int i = 0;
	int x = 0;
	int y = 0;
	int c = this.m_nSP.Numof();
	for (i = 0; i < c; ++i)
	{
		SP_GET_POS(this.m_nSP[i], x, y);
		SP_SET_POS(this.m_nSP[i], x + nAddX, y + nAddY);
	}
}

void sact_group_t::SetShow(int bShow)
{
	int i = 0;
	int c = this.m_nSP.Numof();
	for (i = 0; i < c; ++i)
	{
		SP_SET_SHOW(this.m_nSP[i], bShow);
	}
}

void sact_group_t::ReverseShow()
{
	int i = 0;
	int c = this.m_nSP.Numof();
	for (i = 0; i < c; ++i)
	{
		if (SP_GET_SHOW(this.m_nSP[i]))
		{
			SP_SET_SHOW(this.m_nSP[i], 0);
		}
		else
		{
			SP_SET_SHOW(this.m_nSP[i], 1);
		}
	}
}

void sact_group_t::SetBlendRate(int nBlendRate)
{
	int i = 0;
	int c = this.m_nSP.Numof();
	for (i = 0; i < c; ++i)
	{
		SP_SET_BLEND_RATE(this.m_nSP[i], nBlendRate);
	}
}

void sact_group_t::SetDrawMethod(int nDrawMethod)
{
	int i = 0;
	int c = this.m_nSP.Numof();
	for (i = 0; i < c; ++i)
	{
		SP_SET_DRAW_METHOD(this.m_nSP[i], nDrawMethod);
	}
}

void sact_group_t::Del()
{
	int i = 0;
	int c = this.m_nSP.Numof();
	for (i = 0; i < c; ++i)
	{
		SP_DEL(this.m_nSP[i], 1);
	}
}

int sact_group_t::CheckPoint(int nX, int nY)
{
	int i = 0;
	int nSP = 0;
	int nZ = 0;
	int nSP2 = 0;
	int nZ2 = 0;
	int c = this.m_nSP.Numof();
	for (i = 0; i < c; ++i)
	{
		nSP2 = this.m_nSP[i];
		if (SP_IN_POINT(nSP2, nX, nY))
		{
			nZ2 = SP_GET_Z(nSP2);
			if (nSP == 0 || (nZ2 > nZ || nZ2 == nZ && nSP2 > nSP))
			{
				nSP = nSP2;
				nZ = nZ2;
			}
		}
	}
	return nSP;
}

void sact_group_t::SetZ(int nZ)
{
	int i = 0;
	int c = this.m_nSP.Numof();
	for (i = 0; i < c; ++i)
	{
		SP_SET_Z(this.m_nSP[i], nZ);
	}
}

void sact_group_t::AddZ(int nAddZ)
{
	int i = 0;
	int c = this.m_nSP.Numof();
	for (i = 0; i < c; ++i)
	{
		SP_SET_Z(this.m_nSP[i], SP_GET_Z(this.m_nSP[i]) + nAddZ);
	}
}

