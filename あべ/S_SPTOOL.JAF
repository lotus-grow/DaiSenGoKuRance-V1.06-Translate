bool ＣＧ情報(int nCgNo, ref cg_metrics_t sCgMetrics)
{
	if (!ＣＧあり(nCgNo))
	{
		return false;
	}
	if (!SACT2.CG_GetMetrics(nCgNo, sCgMetrics))
	{
		return false;
	}
	return true;
}

bool ＣＧあり(int nCgNo)
{
	if (nCgNo <= 0)
	{
		return false;
	}
	if (!SACT2.CG_IsExist(nCgNo))
	{
		return false;
	}
	return true;
}

int スプライト番号()
{
	return SACT2.SP_GetUnuseNum(1000);
}

int Ｚ順序最大()
{
	return SACT2.SP_GetMaxZ() + 1;
}

bool 有効スプライト(ref tagSprite spSp)
{
	if (spSp === NULL)
	{
		return false;
	}
	return spSp.isCreate();
}

bool blendUnitCg(ref tagSprite spDst, int nDstX, int nDstY, int nCgNo)
{
	tagSprite spWork;
	if (spWork.setCG(nCgNo) < 0)
	{
		return false;
	}
	int nW = spWork.getWidth();
	int nH = spWork.getHeight();
	int nX = (nDstX - nW) + 1;
	int nY = (nDstY - nH) + 1;
	drawGraph_BlendAMap(spDst, nX, nY, spWork, 0, 0, nW, nH);
	drawGraph_AddDA_DAxSA(spDst, nX, nY, spWork, 0, 0, nW, nH);
	spWork.delete();
	return true;
}

bool createButtonFromCg(int nCgNo, int nCount, ref array@tagSprite aspSp)
{
	if (nCount < 1)
	{
		return false;
	}
	if (aspSp.Numof() < 5)
	{
		return false;
	}
	int i = 0;
	for (i = 0; i < 5; ++i)
	{
		aspSp[i].delete();
	}
	ref tagSprite rfWork1;
	ref tagSprite rfWork2;
	array@tagSprite aspWork;
	aspWork.Alloc(nCount);
	if (createSpriteFromCg(nCgNo, aspWork) != nCount)
	{
		aspWork.Free();
		return false;
	}
	rfWork1 <- aspSp[0];
	rfWork1.attach(aspWork[0].detach());
	rfWork2 <- aspSp[1];
	rfWork2.copy(rfWork1, false);
	rfWork2.blendColor(255, 255, 95, 102);
	rfWork1 <- aspSp[2];
	rfWork1.attach(aspWork[1].detach());
	rfWork2 <- aspSp[3];
	rfWork2.copy(rfWork1, false);
	rfWork2.blendColor(255, 255, 95, 102);
	if (nCount > 2)
	{
		rfWork1 <- aspSp[4];
		rfWork1.attach(aspWork[2].detach());
	}
	aspWork.Free();
	return true;
}

bool createButtonFromCg2(int nCgNo, ref array@tagSprite aspSp)
{
	if (aspSp.Numof() < 5)
	{
		return false;
	}
	int i = 0;
	for (i = 0; i < 5; ++i)
	{
		aspSp[i].delete();
	}
	ref tagSprite rfWork1;
	ref tagSprite rfWork2;
	array@tagSprite aspWork[3];
	if (createSpriteFromCg(nCgNo, aspWork) != 3)
	{
		return false;
	}
	rfWork1 <- aspSp[0];
	rfWork1.attach(aspWork[0].detach());
	rfWork2 <- aspSp[1];
	rfWork2.copy(rfWork1, false);
	rfWork2.blendColor(255, 255, 95, 102);
	rfWork1 <- aspSp[4];
	rfWork1.attach(aspWork[2].detach());
	rfWork2 <- aspSp[2];
	rfWork2.copy(rfWork1, false);
	rfWork2 <- aspSp[3];
	rfWork2.copy(rfWork1, false);
	rfWork2.blendColor(255, 255, 95, 102);
	return true;
}

int createSpriteFromCg(int nCgNo, ref array@tagSprite aspSp)
{
	int cnt = aspSp.Numof();
	if (cnt <= 0)
	{
		return -1;
	}
	tagSprite spCg;
	if (spCg.setCG(nCgNo) < 0)
	{
		return -1;
	}
	int i = 0;
	int nWidth = spCg.getWidth() / cnt;
	int nHeight = spCg.getHeight();
	for (i = 0; i < cnt; ++i)
	{
		aspSp[i].create(nWidth, nHeight, 0, 0, 0, 255);
		aspSp[i].copyCg(0, 0, spCg, nWidth * i, 0, nWidth, nHeight);
	}
	spCg.delete();
	return cnt;
}

int createSpriteFromCg2(int nCgNo, ref array@tagSprite aspSp)
{
	int cnt = aspSp.Numof();
	if (cnt <= 0)
	{
		return -1;
	}
	tagSprite spCg;
	if (spCg.setCG(nCgNo) < 0)
	{
		return -1;
	}
	int i = 0;
	int nWidth = spCg.getWidth();
	int nHeight = spCg.getHeight() / cnt;
	for (i = 0; i < cnt; ++i)
	{
		aspSp[i].create(nWidth, nHeight, 0, 0, 0, 255);
		aspSp[i].copyCg(0, 0, spCg, 0, nHeight * i, nWidth, nHeight);
	}
	spCg.delete();
	return cnt;
}

int createSpriteFromCg3(int nCgNo, ref array@tagSprite@2 aspSp)
{
	int cnt1 = aspSp.Numof();
	if (cnt1 <= 0)
	{
		return -1;
	}
	int cnt2 = aspSp.Numof(2);
	if (cnt2 <= 0)
	{
		return -1;
	}
	tagSprite spCg;
	if (spCg.setCG(nCgNo) < 0)
	{
		return -1;
	}
	int nWidth = spCg.getWidth() / cnt2;
	int nHeight = spCg.getHeight() / cnt1;
	int i = 0;
	int j = 0;
	int nX = 0;
	int nY = 0;
	ref tagSprite spSp;
	nY = 0;
	for (i = 0; i < cnt1; ++i)
	{
		nX = 0;
		for (j = 0; j < cnt2; ++j)
		{
			spSp <- aspSp[i][j];
			spSp.create(nWidth, nHeight, 0, 0, 0, 255);
			spSp.copyCg(0, 0, spCg, nX, nY, nWidth, nHeight);
			nX += nWidth;
		}
		nY += nHeight;
	}
	spCg.delete();
	return cnt1 * cnt2;
}

void zoomUp(ref tagSprite spSrc, int nZoomX, int nZoomY, int nZoomW, int nZoomH, int nZoomTime)
{
	if (!有効スプライト(spSrc))
	{
		return;
	}
	int nSrcX = spSrc.getPosX();
	int nSrcY = spSrc.getPosY();
	int nSrcW = spSrc.getWidth();
	int nSrcH = spSrc.getHeight();
	bool bAlpha = spSrc.existAlpha();
	int nX = 0;
	int nY = 0;
	int nW = 0;
	int nH = 0;
	int nTime = 0;
	sact_timer_t sTimer;
	tagSprite spWork;
	sTimer.Set(0);
	while (nTime < nZoomTime)
	{
		nX = nZoomX + ((nSrcX - nZoomX) * nTime) / nZoomTime;
		nY = nZoomY + ((nSrcY - nZoomY) * nTime) / nZoomTime;
		nW = nZoomW + ((nSrcW - nZoomW) * nTime) / nZoomTime;
		nH = nZoomH + ((nSrcH - nZoomH) * nTime) / nZoomTime;
		if (bAlpha)
		{
			spWork.create(nW, nH, 0, 0, 0, 0);
			drawGraph_CopyReduceAMap(spWork, 0, 0, nW, nH, spSrc, 0, 0, nSrcW, nSrcH);
		}
		else
		{
			spWork.createPixelOnly(nW, nH);
		}
		spWork.setPos(nX, nY);
		spWork.setZ(-1);
		spWork.setShow(1);
		drawGraph_CopyReduce(spWork, 0, 0, nW, nH, spSrc, 0, 0, nSrcW, nSrcH);
		UPDATE();
		spWork.delete();
		nTime = sTimer.Get();
	}
}

void zoomDown(ref tagSprite spSrc, int nZoomX, int nZoomY, int nZoomW, int nZoomH, int nZoomTime)
{
	if (!有効スプライト(spSrc))
	{
		return;
	}
	int nSrcX = spSrc.getPosX();
	int nSrcY = spSrc.getPosY();
	int nSrcW = spSrc.getWidth();
	int nSrcH = spSrc.getHeight();
	bool bAlpha = spSrc.existAlpha();
	int nX = 0;
	int nY = 0;
	int nW = 0;
	int nH = 0;
	int nTime = 0;
	sact_timer_t sTimer;
	tagSprite spWork;
	sTimer.Set(0);
	while (nTime < nZoomTime)
	{
		nX = nSrcX + ((nZoomX - nSrcX) * nTime) / nZoomTime;
		nY = nSrcY + ((nZoomY - nSrcY) * nTime) / nZoomTime;
		nW = nSrcW - ((nSrcW - nZoomW) * nTime) / nZoomTime;
		nH = nSrcH - ((nSrcH - nZoomH) * nTime) / nZoomTime;
		if (bAlpha)
		{
			spWork.create(nW, nH, 0, 0, 0, 0);
			drawGraph_CopyReduceAMap(spWork, 0, 0, nW, nH, spSrc, 0, 0, nSrcW, nSrcH);
		}
		else
		{
			spWork.createPixelOnly(nW, nH);
		}
		spWork.setPos(nX, nY);
		spWork.setZ(-1);
		spWork.setShow(1);
		drawGraph_CopyReduce(spWork, 0, 0, nW, nH, spSrc, 0, 0, nSrcW, nSrcH);
		UPDATE();
		spWork.delete();
		nTime = sTimer.Get();
	}
}

bool createFrameFromCg(ref tagSprite spFrame, int nCgNo, int nCgWidth, int nCgHeight)
{
	if (!有効スプライト(spFrame))
	{
		return false;
	}
	if (!ＣＧあり(nCgNo))
	{
		return false;
	}
	tagSprite spCg;
	spCg.setCG(nCgNo);
	int nX2 = 0;
	int nY2 = 0;
	int nW = spFrame.getWidth();
	int nH = spFrame.getHeight();
	nX2 = 0;
	nY2 = 0;
	spFrame.copyCg(nX2, nY2, spCg, 0, 0, nCgWidth, nCgHeight);
	nX2 += nCgWidth;
	while (nX2 < nW - nCgWidth)
	{
		spFrame.copyCg(nX2, nY2, spCg, nCgWidth, 0, nCgWidth, nCgHeight);
		nX2 += nCgWidth;
	}
	nX2 = nW - nCgWidth;
	spFrame.copyCg(nX2, nY2, spCg, nCgWidth * 2, 0, nCgWidth, nCgHeight);
	nY2 += nCgHeight;
	while (nY2 < nH - nCgHeight)
	{
		nX2 = 0;
		spFrame.copyCg(nX2, nY2, spCg, 0, nCgHeight, nCgWidth, nCgHeight);
		nX2 += nCgWidth;
		while (nX2 < nW - nCgWidth)
		{
			spFrame.copyCg(nX2, nY2, spCg, nCgWidth, nCgHeight, nCgWidth, nCgHeight);
			nX2 += nCgWidth;
		}
		nX2 = nW - nCgWidth;
		spFrame.copyCg(nX2, nY2, spCg, nCgWidth * 2, nCgHeight, nCgWidth, nCgHeight);
		nY2 += nCgHeight;
	}
	nX2 = 0;
	nY2 = nH - nCgHeight;
	spFrame.copyCg(nX2, nY2, spCg, 0, nCgHeight * 2, nCgWidth, nCgHeight);
	nX2 += nCgWidth;
	while (nX2 < nW - nCgWidth)
	{
		spFrame.copyCg(nX2, nY2, spCg, nCgWidth, nCgHeight * 2, nCgWidth, nCgHeight);
		nX2 += nCgWidth;
	}
	nX2 = nW - nCgWidth;
	spFrame.copyCg(nX2, nY2, spCg, nCgWidth * 2, nCgHeight * 2, nCgWidth, nCgHeight);
	spCg.delete();
	return true;
}

void createDummyButton(ref tagSprite spSp, int nWidth, int nHeight, string szText, int nFontSize, int nColorR, int nColorG, int nColorB, int nLineSize, int nBackColorR, int nBackColorG, int nBackColorB, int nBackRate)
{
	sact_text_metrics_t sTextMetrics;
	sTextMetrics.nSize = nFontSize;
	sTextMetrics.nColorR = nColorR;
	sTextMetrics.nColorG = nColorR;
	sTextMetrics.nColorB = nColorR;
	sTextMetrics.nWeight = 1400;
	sTextMetrics.nFace = 0;
	spSp.create(nWidth, nHeight, nColorR, nColorG, nColorB, 255);
	drawGraph_Fill(spSp, nLineSize, nLineSize, nWidth - nLineSize * 2, nHeight - nLineSize * 2, nBackColorR, nBackColorG, nBackColorB);
	drawGraph_FillAMap(spSp, nLineSize, nLineSize, nWidth - nLineSize * 2, nHeight - nLineSize * 2, nBackRate);
	spSp.textDrawCenter(szText, sTextMetrics);
}

