tagBushoInfo::tagBushoInfo()
{
	this.m_nSeiryokuNo = -1;
	this.m_nBushoNo = 0;
	this.m_nMode = -1;
}

tagBushoInfo::~tagBushoInfo()
{
	this.delete();
}

void tagBushoInfo::create(int nZ)
{
	this.delete();
	this.m_spBase.setCG(10120);
	this.m_spBase.setPos(1, 2);
	this.m_spBase.setZ(nZ);
	this.m_sName.create(8, 1, 0, 0);
	this.m_sName.setPos(12, 8);
	this.m_sName.setZ(nZ + 1);
	this.m_sName.setFontSize(20);
	this.m_sName.setFontFace(0);
	this.m_sName.setFontBold(false);
	this.m_sName.setFontColor(255, 255, 255);
	this.m_sName.setShadowPixel(0, 0, 0, 0);
	this.m_sName.setShadowColor(128, 128, 128);
	this.m_sRelation.create(156, 8, nZ + 1);
	this.m_spBase2.setCG(10121);
	this.m_spBase2.setPos(7, 34);
	this.m_spBase2.setZ(nZ + 2);
	this.m_sFace.create();
	this.m_sFace.setPos(15, 42);
	this.m_sFace.setZ(nZ + 3);
	this.m_sSolo.create(10, 4, 0, 0);
	this.m_sSolo.setPos(89, 37);
	this.m_sSolo.setZ(nZ + 2);
	this.m_sSolo.setFontSize(14);
	this.m_sSolo.setFontFace(0);
	this.m_sSolo.setFontColor(255, 255, 255);
}

void tagBushoInfo::delete()
{
	this.m_nSeiryokuNo = -1;
	this.m_nBushoNo = 0;
	this.m_nMode = -1;
	this.m_spBase.delete();
	this.m_sName.delete();
	this.m_sRelation.delete();
	this.m_spUnit.delete();
	this.m_spBase2.delete();
	this.m_sFace.delete();
	this.m_sAction.delete();
	this.m_sItem.delete();
	this.m_sSolo.delete();
	this.m_sGheisu.delete();
	this.m_sGhtype.delete();
	this.m_spBack.delete();
	this.m_sLev.delete();
}

void tagBushoInfo::update()
{
	if (this.m_nMode < 0)
	{
		return;
	}
	this.setItemNo(-1);
	this.drawLevel();
}

void tagBushoInfo::set(int nSeiryokuNo, int nBushoNo)
{
	if (!this.draw(nSeiryokuNo, nBushoNo))
	{
		this.m_nSeiryokuNo = -1;
		this.m_nBushoNo = 0;
		this.m_nMode = -1;
	}
	this.setShow(true);
}

void tagBushoInfo::setItemNo(int nItemNo)
{
	if (nItemNo < 0)
	{
		nItemNo = キャラ_アイテム(this.m_nSeiryokuNo, this.m_nBushoNo);
	}
	if (nItemNo > 0)
	{
		this.m_sItem.create(nItemNo);
		this.m_sItem.setPos(29, 204);
		this.m_sItem.setZ(this.m_sFace.getZ());
		this.m_sItem.setActive(true);
		this.m_sItem.setShow(true);
	}
	else
	{
		this.m_sItem.delete();
	}
}

bool tagBushoInfo::exec(int nID)
{
	string szMsg1 = "";
	string szMsg2 = "";
	string szMsg3 = "";
	if (nID == 5009)
	{
		if (!this.dragItem())
		{
			goto label0;
		}
		if (キャラ_行動(this.m_nSeiryokuNo, this.m_nBushoNo) > 0)
		{
			通知("行動済みのキャラから", "装備品をはずすことはできません。", "", "Ｏ　Ｋ");
			return false;
		}
		if (g_sItem.getType() <= 0)
		{
			通知("装備をはずすときは、", "アイテム倉庫を表示してください", "", "Ｏ　Ｋ");
			return false;
		}
		int nItemNo = キャラ_アイテム(this.m_nSeiryokuNo, this.m_nBushoNo);
		if (アイテム_固定装備(nItemNo))
		{
			szMsg1 = "【" + キャラ_名前(this.m_nSeiryokuNo, this.m_nBushoNo) + "】が装備中の";
			szMsg2 = "【" + アイテム_名前(nItemNo) + "】は、";
			szMsg3 = "はずすことができません";
			通知(szMsg1, szMsg2, szMsg3, "Ｏ　Ｋ");
			return false;
		}
		キャラ_アイテム設定(this.m_nSeiryokuNo, this.m_nBushoNo, 0);
		g_sItem.setActive(nItemNo, true);
		this.setItemNo(0);
		return true;
	}
	if (nID > 5000)
	{
	}
label0:
	キー_クリア(true);
	return false;
}

int tagBushoInfo::checkMouse()
{
	if (this.m_nSeiryokuNo < 0 || this.m_nBushoNo <= 0)
	{
		return 0;
	}
	int nNo = this.m_sAction.checkMouseRect(true, true);
	if (nNo > 0)
	{
		return this.m_sAction.getButtonID(nNo);
	}
	if (this.m_sItem.checkMouseRect(true))
	{
		return 5009;
	}
	return 0;
}

bool tagBushoInfo::checkClick(int nID)
{
	if (nID == 5009)
	{
		if (this.m_sItem.getItemNo() > 0)
		{
			return true;
		}
	}
	if (nID > 5000)
	{
	}
	playCancel();
	キー_離し待ち(0);
	return false;
}

void tagBushoInfo::showComment(int nID)
{
	g_sComment.hide();
	if (nID == 5009)
	{
		this.m_sItem.showComment();
		return;
	}
	if (nID > 5000)
	{
		int nActionNo = this.getActionNo(nID);
		array@string aszText;
		テキスト分割(行動_説明(nActionNo), 15, aszText);
		g_sComment.show2(aszText);
		return;
	}
}

void tagBushoInfo::resetSelect()
{
	this.m_sAction.resetSelect();
	this.m_sItem.setSelect(false);
}

void tagBushoInfo::setSelect(int nID, bool bSelect)
{
	if (nID == 5009)
	{
		this.m_sItem.setSelect(bSelect);
		return;
	}
	if (nID > 5000)
	{
		this.m_sAction.setButtonSelect(this.m_sAction.getButtonNo(nID), bSelect);
		return;
	}
}

void tagBushoInfo::setCursor(int nID)
{
	if (nID == 5009)
	{
		this.m_sItem.setCursor();
		return;
	}
	if (nID > 5000)
	{
		this.m_sAction.setCursor(this.m_sAction.getButtonNo(nID));
		return;
	}
}

void tagBushoInfo::setShow(bool bShow)
{
	if (this.m_nSeiryokuNo < 0 || this.m_nBushoNo <= 0)
	{
		bShow = false;
	}
	this.m_spBase.setShow(bShow);
	this.m_sName.setShow(bShow);
	this.m_sRelation.setShow(bShow);
	this.m_spUnit.setShow(bShow);
	this.m_spBase2.setShow(bShow);
	this.m_sFace.setShow(bShow);
	this.m_sAction.setShow(bShow);
	this.m_sItem.setShow(bShow);
	this.m_sSolo.setShow(bShow);
}

int tagBushoInfo::getSeiryokuNo()
{
	return this.m_nSeiryokuNo;
}

int tagBushoInfo::getBushoNo()
{
	return this.m_nBushoNo;
}

int tagBushoInfo::getItemNo()
{
	return this.m_sItem.getItemNo();
}

bool tagBushoInfo::getShow()
{
	return this.m_spBase.getShow();
}

ref tagBushoRelation tagBushoInfo::getRelation()
{
	return this.m_sRelation;
}

bool tagBushoInfo::draw(int nSeiryokuNo, int nBushoNo)
{
	if (g_sMapControl.getType() == 13)
	{
		return false;
	}
	sキャラ sData;
	if (!キャラ_取得(nSeiryokuNo, nBushoNo, sData))
	{
		return false;
	}
	int nMode = キャラ_ＨＰモード(nSeiryokuNo, nBushoNo);
	if (nSeiryokuNo == this.m_nSeiryokuNo && nBushoNo == this.m_nBushoNo && nMode == this.m_nMode)
	{
		return true;
	}
	this.m_nSeiryokuNo = nSeiryokuNo;
	this.m_nBushoNo = nBushoNo;
	this.m_nMode = nMode;
	this.m_sName.setText(sData.名前);
	if (sData.番号 == 1000)
	{
		this.m_sRelation.set(sData.好感度, 0);
	}
	else
	{
		this.m_sRelation.set(sData.好感度, sData.関係);
	}
	this.createUnit(nSeiryokuNo, nBushoNo);
	this.m_sFace.set(nSeiryokuNo, nBushoNo);
	this.m_sAction.create(this.m_sFace.getZ(), -1, -1);
	int nY = 124;
	this.createAction(5001, 14, nY);
	nY += 14;
	this.createAction(5002, 14, nY);
	nY += 14;
	this.createAction(5003, 14, nY);
	nY += 14;
	this.createAction(5004, 14, nY);
	nY += 14;
	this.createAction(5005, 14, nY);
	this.setItemNo(sData.アイテム);
	this.drawLevel();
	return true;
}

void tagBushoInfo::drawLevel()
{
	sキャラ sData;
	if (!キャラ_取得(this.m_nSeiryokuNo, this.m_nBushoNo, sData))
	{
		this.m_sSolo.setText("");
		return;
	}
	array@string aszText[4];
	aszText[0] = "[体力：" + 半角数字(sData.Ｓ体力, 3, 1) + "/" + 半角数字(sData.Ｓ体力最大, 3, 1) + "]";
	aszText[1] = "[ＬＶ：" + 半角数字(sData.Ｓレベル, 3, 0) + "/" + 半角数字(sData.Ｓレベル上限, 3, 0) + "]";
	aszText[2] = "[兵種：" + 文字列／兵種(sData.兵種) + "]";
	if (ＧＦ[325] > 0)
	{
		aszText[2] = "";
		array@string aszText2[4];
		aszText2[0] = "";
		aszText2[1] = "";
		aszText2[2] = "[兵種：" + 文字列／兵種(ＧＦ[325]) + "]";
		this.m_sGhtype.setTexts(aszText2, -1);
		this.m_sGhtype.setShow(true);
	}
	else
	{
		this.m_sGhtype.setShow(false);
	}
	if (ＧＦ[422] > 0)
	{
		aszText[1] = "";
		array@string aszText3[4];
		aszText3[0] = "";
		lint slvl = ＧＦ[422];
		if (sData.Ｓレベル + slvl > sData.Ｓレベル上限)
		{
			slvl = sData.Ｓレベル上限 - sData.Ｓレベル;
		}
		aszText3[1] = "[ＬＶ：" + 半角数字(sData.Ｓレベル + slvl, 3, 0) + "/" + 半角数字(sData.Ｓレベル上限, 3, 0) + "]";
		aszText3[2] = "";
		this.m_sLev.setTexts(aszText3, -1);
		this.m_sLev.setShow(true);
	}
	else
	{
		this.m_sLev.setShow(false);
	}
	this.m_sSolo.setTexts(aszText, -1);
}

bool tagBushoInfo::dragItem()
{
	int nItemNo = this.m_sItem.getItemNo();
	int nMx = 0;
	int nMy = 0;
	if (nItemNo < 1 || nItemNo > 300)
	{
		return false;
	}
	if (!マウス_位置取得(nMx, nMy))
	{
		return false;
	}
	if (!キー_押下(1))
	{
		return false;
	}
	bool bRet = false;
	int nX = 0;
	int nY = 0;
	tagSprite spItem;
	nX = nMx - 32;
	nY = nMy - 32;
	spItem.copy(this.m_sItem.getSp(), false);
	spItem.setPos(nX, nY);
	spItem.setZ(-1);
	spItem.setShow(1);
	UPDATE();
	playDrag();
	int nX2 = 0;
	int nY2 = 0;
	int nX3 = 0;
	int nY3 = 0;
	int nMx2 = 0;
	int nMy2 = 0;
	int nMx3 = 0;
	int nMy3 = 0;
	int nMaxX = 画面幅();
	int nMaxY = 画面高さ();
	nX2 = nX;
	nY2 = nY;
	nMx2 = nMx;
	nMy2 = nMy;
	while (キー_押下(1))
	{
		if (!マウス_位置取得(nMx3, nMy3))
		{
			goto label0;
		}
		int nX3 = (nX + nMx3) - nMx;
		int nY3 = (nY + nMy3) - nMy;
		if (nX3 < 0 || nY3 < 0 || nX3 + 64 > nMaxX || nY3 + 64 > nMaxY)
		{
			マウス_位置設定(nMx2, nMy2);
			continue;
		}
		spItem.setPos(nX3, nY3);
		UPDATE();
		nX2 = nX3;
		nY2 = nY3;
		nMx2 = nMx3;
		nMy2 = nMy3;
	}
	tagRect rect;
	rect.set2(0, 282, 376, 572);
	if (rect.mouseInRect())
	{
		bRet = true;
		playDrop();
		goto label0;
	}
	int nTime = 0;
	sact_timer_t sTimer;
	nX = this.m_sItem.getPosX();
	nY = this.m_sItem.getPosY();
	playCancel();
	sTimer.Set(0);
	while (nTime < 50)
	{
		spItem.setPos(nX2 + ((nX - nX2) * nTime) / 50, nY2 + ((nY - nY2) * nTime) / 50);
		UPDATE();
		nTime = sTimer.Get();
	}
label0:
	spItem.delete();
	UPDATE();
	キー_クリア(true);
	return bRet;
}

void tagBushoInfo::createUnit(int nSeiryokuNo, int nBushoNo)
{
	this.m_spUnit.delete();
	int nBushoCgNo = g_sUnitData.getBushoCgNo(nSeiryokuNo, nBushoNo);
	if (nBushoCgNo <= 0)
	{
		return;
	}
	this.m_spUnit.create(362, 241, 0, 0, 0, 0);
	this.m_spUnit.setPos(7, 34);
	this.m_spUnit.setZ(this.m_spBase.getZ() + 1);
	int nType = キャラ_兵種(nSeiryokuNo, nBushoNo);
	int nCgNo1 = 0;
	int nCgNo2 = 0;
	if (nType == 3)
	{
		if (this.m_nMode == 0)
		{
			nCgNo1 = g_sUnitData.getForwardCgNo(nSeiryokuNo, nBushoNo, 0);
		}
		this.blendUnit(368, 201, nCgNo1);
		this.blendUnit(419, 262, nBushoCgNo);
		this.blendUnit(333, 288, nCgNo1);
		return;
	}
	if (nType == 2)
	{
		if (this.m_nMode == 0)
		{
			nCgNo1 = g_sUnitData.getBackCgNo(nSeiryokuNo, nBushoNo, 0);
		}
		this.blendUnit(311, 219, nCgNo1);
		this.blendUnit(410, 263, nBushoCgNo);
		this.blendUnit(265, 305, nCgNo1);
		return;
	}
	if (this.m_nMode == 0)
	{
		nCgNo1 = g_sUnitData.getBackCgNo(nSeiryokuNo, nBushoNo, 0);
		nCgNo2 = g_sUnitData.getBackCgNo(nSeiryokuNo, nBushoNo, 1);
		if (ＧＦ[325] > 0)
		{
			nCgNo1 = g_sUnitData.getBackCgNo(nSeiryokuNo, ＧＦ[325], 0);
			nCgNo2 = g_sUnitData.getBackCgNo(nSeiryokuNo, ＧＦ[325], 1);
		}
	}
	this.blendUnit(350, 200, nCgNo2 > 0 ? nCgNo2 : nCgNo1);
	this.blendUnit(419, 262, nBushoCgNo);
	if (ＧＦ[319] == 2)
	{
		this.blendUnit(315, 296, gs[ＧＦ[418]][ＧＦ[326]].ＵＮ１);
	}
	else if (gs[nSeiryokuNo][nBushoNo].ＵＮ２ > 0)
	{
		this.blendUnit(315, 296, gs[1][nBushoNo].ＵＮ２);
	}
	else
	{
		this.blendUnit(315, 296, nCgNo1);
	}
}

void tagBushoInfo::blendUnit(int nX, int nY, int nCgNo)
{
	if (nCgNo <= 0)
	{
		return;
	}
	int nX2 = nX - 7;
	int nY2 = nY - 34;
	blendUnitCg(this.m_spUnit, nX2, nY2, nCgNo);
}

void tagBushoInfo::createAction(int nID, int nX, int nY)
{
	int nActionNo = this.getActionNo(nID);
	int nNo = 0;
	tagSprite spWork1;
	tagSprite spWork2;
	sact_text_metrics_t tmWaza;
	tmWaza.nSize = 14;
	tmWaza.nWeight = 1400;
	tmWaza.nFace = 0;
	if (行動_説明あり(nActionNo))
	{
		tmWaza.nColorR = 255;
		tmWaza.nColorG = 255;
		tmWaza.nColorB = 95;
	}
	else
	{
		tmWaza.nColorR = 255;
		tmWaza.nColorG = 255;
		tmWaza.nColorB = 255;
	}
	string szName = 行動_名前(nActionNo);
	string szText = "";
	if (szName.Length() > 0)
	{
		szText = "[" + szName + "]";
	}
	else
	{
		szText = "[−−−]";
	}
	LOG_TADA("ノーマルcreateAction");
	int nW = getTextWidth(14, szText);
	spWork1.create(nW, 14, 0, 0, 0, 0);
	spWork1.textDrawPos(0, 0, szText, tmWaza, true);
	spWork2.create(nW, 14, tmWaza.nColorR, tmWaza.nColorG, tmWaza.nColorB, 102);
	spWork2.textDrawPos(0, 0, szText, tmWaza, true);
	nNo = this.m_sAction.addButtonSp(spWork1, spWork2, NULL, NULL, NULL);
	this.m_sAction.setButtonPos(nNo, nX, nY);
	this.m_sAction.setButtonActive(nNo, true);
	this.m_sAction.setButtonID(nNo, nID);
}

int tagBushoInfo::getActionNo(int nID)
{
	if (nID == 5001)
	{
		if (this.m_nMode == 1)
		{
			return キャラ_技１Ｂ(this.m_nSeiryokuNo, this.m_nBushoNo);
		}
		return キャラ_技１(this.m_nSeiryokuNo, this.m_nBushoNo);
	}
	if (nID == 5002)
	{
		if (this.m_nMode == 1)
		{
			return キャラ_技２Ｂ(this.m_nSeiryokuNo, this.m_nBushoNo);
		}
		return キャラ_技２(this.m_nSeiryokuNo, this.m_nBushoNo);
	}
	if (nID == 5003)
	{
		if (this.m_nMode == 1)
		{
			return キャラ_技３Ｂ(this.m_nSeiryokuNo, this.m_nBushoNo);
		}
		return キャラ_技３(this.m_nSeiryokuNo, this.m_nBushoNo);
	}
	if (nID == 5004)
	{
		if (this.m_nMode == 1)
		{
			return キャラ_技４Ｂ(this.m_nSeiryokuNo, this.m_nBushoNo);
		}
		return キャラ_技４(this.m_nSeiryokuNo, this.m_nBushoNo);
	}
	if (nID == 5005)
	{
		if (this.m_nMode == 1)
		{
			return キャラ_技能Ｂ(this.m_nSeiryokuNo, this.m_nBushoNo);
		}
		return キャラ_技能(this.m_nSeiryokuNo, this.m_nBushoNo);
	}
	return 0;
}

