void KEY_CLEAR(bool bClearJoypad)
{
	SACT2.Key_ClearFlag();
	if (bClearJoypad)
	{
		SACT2.Joypad_ClearKeyDownFlag(0);
	}
}

int KEY_IS_DOWN(int nKeyCode)
{
	int nJK = g_anVK_AS_JK[nKeyCode];
	if (nJK && JOYPAD_IS_KEY_DOWN(0, nJK))
	{
		return 1;
	}
	return SACT2.Key_IsDown(nKeyCode);
}

int MOUSE_GET_POS(ref int x, ref int y)
{
	return SACT2.Mouse_GetPos(x, y);
}

void MOUSE_SET_POS(int x, int y)
{
	SACT2.Mouse_SetPos(x, y);
}

void MOUSE_CLEAR_WHEEL()
{
	SACT2.Mouse_ClearWheel();
}

void MOUSE_GET_WHEEL(ref int nForward, ref int nBack, int bClear)
{
	SACT2.Mouse_GetWheel(nForward, nBack);
	if (bClear)
	{
		SACT2.Mouse_ClearWheel();
	}
}

void MOUSE_SET_POS_SP_CENTER(int nSP)
{
	pos_t pos;
	SP_GET_CENTER(nSP, pos.x, pos.y);
	SACT2.Mouse_SetPos(pos.x, pos.y);
}

void MOUSE_SET_POS_SP_RB(int nSP)
{
	rect_t rc;
	SP_GET_RECT(nSP, rc);
	pos_t pos;
	pos.x = (rc.x + rc.w) - 1;
	pos.y = (rc.y + rc.h) - 1;
	size_t siz;
	SCREEN_GET_SIZE(siz.w, siz.h);
	if (pos.x < 0)
	{
		pos.x = 0;
	}
	if (pos.y < 0)
	{
		pos.y = 0;
	}
	if (pos.x >= siz.w)
	{
		pos.x = siz.w - 1;
	}
	if (pos.y >= siz.h)
	{
		pos.y = siz.h - 1;
	}
	SACT2.Mouse_SetPos(pos.x, pos.y);
}

int JOYPAD_IS_KEY_DOWN(int nDeviceNum, int nJK)
{
	return SACT2.Joypad_IsKeyDown(nDeviceNum, nJK);
}

int JOYPAD_GET_DEVICE_NUM_OF()
{
	return SACT2.Joypad_GetNumof();
}

void JOYPAD_QUAKE_START(int nDeviceNum, int nType, int nMagnitude)
{
	SACT2.JoypadQuake_Set(nDeviceNum, nType, nMagnitude);
}

void JOYPAD_QUAKE_STOP(int nDeviceNum, int nType)
{
	SACT2.JoypadQuake_Set(nDeviceNum, nType, 0);
}

void JOYPAD_ASSIGN_KEY(int nVK, int nJK)
{
	g_anVK_AS_JK[nVK] = nJK;
}

void JOYPAD_ASSIGN_KEY_STANDARD_SET(int nType)
{
	switch (nType)
	{
		case 1:
			JOYPAD_ASSIGN_KEY_STANDARD_SET_01();
			break;
		default:
			JOYPAD_ASSIGN_KEY_STANDARD_SET_01();
			break;
	}
}

void JOYPAD_ASSIGN_KEY_STANDARD_SET_01()
{
	JOYPAD_ASSIGN_KEY(37, 1);
	JOYPAD_ASSIGN_KEY(39, 2);
	JOYPAD_ASSIGN_KEY(38, 3);
	JOYPAD_ASSIGN_KEY(40, 4);
	JOYPAD_ASSIGN_KEY(27, 5);
	JOYPAD_ASSIGN_KEY(13, 6);
	JOYPAD_ASSIGN_KEY(32, 7);
	JOYPAD_ASSIGN_KEY(17, 8);
	JOYPAD_ASSIGN_KEY(65, 9);
	JOYPAD_ASSIGN_KEY(90, 10);
	JOYPAD_ASSIGN_KEY(33, 11);
	JOYPAD_ASSIGN_KEY(34, 12);
}

void key_group_t::Clear()
{
	this.m_nKeys.Free();
}

void key_group_t::Add(int nVK)
{
	int c = this.m_nKeys.Numof();
	int i = 0;
	for (i = 0; i < c; ++i)
	{
		if (this.m_nKeys[i] == nVK)
		{
			return;
		}
	}
	this.m_nKeys.Realloc(c + 1);
	this.m_nKeys[c] = nVK;
}

void key_group_t::AddAll()
{
	this.m_nKeys.Free();
	this.m_nKeys.Alloc(255);
	int i = 0;
	for (i = 1; i < 255; ++i)
	{
		this.m_nKeys[i] = i;
	}
}

int key_group_t::IsDown()
{
	int c = this.m_nKeys.Numof();
	int i = 0;
	for (i = 0; i < c; ++i)
	{
		if (KEY_IS_DOWN(this.m_nKeys[i]))
		{
			return 1;
		}
	}
	return 0;
}

int key_group_t::Peek()
{
	int c = this.m_nKeys.Numof();
	int i = 0;
	for (i = 0; i < c; ++i)
	{
		if (KEY_IS_DOWN(this.m_nKeys[i]))
		{
			return this.m_nKeys[i];
		}
	}
	return 0;
}

int key_group_t::Wait()
{
	KEY_CLEAR(true);
	for (; ; )
	{
		SACT_UPDATE(1);
		int vk = this.Peek();
		if (vk != 0)
		{
			KEY_CLEAR(true);
			return vk;
		}
	}
	return 0;
}

void SACT_RESTRAIN_SCREENSAVER()
{
	SystemService.RestrainScreensaver();
}

bool JOYPAD_GET_ANALOG_STICK_STATUS(ref float pfDegree, ref float pfPower, bool bRightStick, int nPadNum)
{
	if (nPadNum == -1)
	{
		nPadNum = 0;
	}
	return SACT2.Joypad_GetAnalogStickStatus(nPadNum, bRightStick ? 1 : 0, pfDegree, pfPower);
}

bool JOYPAD_GET_DIGITAL_STICK_STATUS(ref bool pbLeft, ref bool pbRight, ref bool pbUp, ref bool pbDown, bool bRightStick, int nPadNum)
{
	if (nPadNum == -1)
	{
		nPadNum = 0;
	}
	return SACT2.Joypad_GetDigitalStickStatus(nPadNum, bRightStick ? 1 : 0, pbLeft, pbRight, pbUp, pbDown);
}

